// Generated by CIRCT firtool-1.66.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module CompareRecFN(
  input  [64:0] io_a,	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:44:16
                io_b,	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:44:16
  input         io_signaling,	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:44:16
  output        io_lt,	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:44:16
                io_eq,	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:44:16
  output [4:0]  io_exceptionFlags	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:44:16
);

  wire [64:0] io_a_0 = io_a;
  wire [64:0] io_b_0 = io_b;
  wire        io_signaling_0 = io_signaling;
  wire [11:0] rawA_exp = io_a_0[63:52];	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21
  wire        rawA_isZero = rawA_exp[11:9] == 3'h0;	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :52:{28,53}
  wire        rawA_isZero_0 = rawA_isZero;	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:52:53, :55:23
  wire        rawA_isSpecial = &(rawA_exp[11:10]);	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :53:{28,53}
  wire        rawA_isNaN = rawA_isSpecial & rawA_exp[9];	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :53:53, :55:23, :56:{33,41}
  wire        rawA_isInf = rawA_isSpecial & ~(rawA_exp[9]);	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :53:53, :55:23, :56:41, :57:{33,36}
  wire        rawA_sign = io_a_0[64];	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23, :59:25
  wire [12:0] rawA_sExp = {1'h0, rawA_exp};	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :55:23, :60:27
  wire [53:0] rawA_sig = {1'h0, ~rawA_isZero, io_a_0[51:0]};	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:52:53, :55:23, :61:{35,44,49}
  wire [11:0] rawB_exp = io_b_0[63:52];	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21
  wire        rawB_isZero = rawB_exp[11:9] == 3'h0;	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :52:{28,53}
  wire        rawB_isZero_0 = rawB_isZero;	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:52:53, :55:23
  wire        rawB_isSpecial = &(rawB_exp[11:10]);	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :53:{28,53}
  wire        rawB_isNaN = rawB_isSpecial & rawB_exp[9];	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :53:53, :55:23, :56:{33,41}
  wire        rawB_isInf = rawB_isSpecial & ~(rawB_exp[9]);	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :53:53, :55:23, :56:41, :57:{33,36}
  wire        rawB_sign = io_b_0[64];	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23, :59:25
  wire [12:0] rawB_sExp = {1'h0, rawB_exp};	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :55:23, :60:27
  wire [53:0] rawB_sig = {1'h0, ~rawB_isZero, io_b_0[51:0]};	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:52:53, :55:23, :61:{35,44,49}
  wire        ordered = ~rawA_isNaN & ~rawB_isNaN;	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:57:{19,32,35}, hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
  wire        bothInfs = rawA_isInf & rawB_isInf;	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:58:33, hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
  wire        bothZeros = rawA_isZero_0 & rawB_isZero_0;	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:59:33, hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
  wire        eqExps = rawA_sExp == rawB_sExp;	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:60:29, hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
  wire        common_ltMags =
    $signed(rawA_sExp) < $signed(rawB_sExp) | eqExps & rawA_sig < rawB_sig;	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:60:29, :62:{20,33,44,57}, hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
  wire        common_eqMags = eqExps & rawA_sig == rawB_sig;	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:60:29, :63:{32,45}, hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
  wire        ordered_lt =
    ~bothZeros
    & (rawA_sign & ~rawB_sign | ~bothInfs
       & (rawA_sign & ~common_ltMags & ~common_eqMags | ~rawB_sign & common_ltMags));	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:58:33, :59:33, :62:33, :63:32, :66:{9,21}, :67:{25,28,41}, :68:{19,30}, :69:{35,38,54,57,74}, :70:41, hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
  wire        ordered_eq =
    bothZeros | rawA_sign == rawB_sign & (bothInfs | common_eqMags);	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:58:33, :59:33, :63:32, :72:{19,34,49,62}, hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
  wire        invalid =
    rawA_isNaN & ~(rawA_sig[51]) | rawB_isNaN & ~(rawB_sig[51]) | io_signaling_0
    & ~ordered;	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:57:32, :75:{32,58}, :76:{27,30}, hardfloat/hardfloat/src/main/scala/common.scala:82:{46,49,56}, hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
  wire        io_lt_0 = ordered & ordered_lt;	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:57:32, :66:21, :78:22
  wire        io_eq_0 = ordered & ordered_eq;	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:57:32, :72:19, :79:22
  wire        io_gt = ordered & ~ordered_lt & ~ordered_eq;	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:57:32, :66:21, :72:19, :80:{22,25,38,41}
  wire [4:0]  io_exceptionFlags_0 = {invalid, 4'h0};	// hardfloat/hardfloat/src/main/scala/CompareRecFN.scala:75:58, :81:34
  assign io_lt = io_lt_0;
  assign io_eq = io_eq_0;
  assign io_exceptionFlags = io_exceptionFlags_0;
endmodule


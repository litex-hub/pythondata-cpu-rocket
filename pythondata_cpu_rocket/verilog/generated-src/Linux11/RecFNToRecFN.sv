// Generated by CIRCT firtool-1.66.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module RecFNToRecFN(
  input  [64:0] io_in,	// hardfloat/hardfloat/src/main/scala/RecFNToRecFN.scala:48:16
  input  [2:0]  io_roundingMode,	// hardfloat/hardfloat/src/main/scala/RecFNToRecFN.scala:48:16
  output [32:0] io_out,	// hardfloat/hardfloat/src/main/scala/RecFNToRecFN.scala:48:16
  output [4:0]  io_exceptionFlags	// hardfloat/hardfloat/src/main/scala/RecFNToRecFN.scala:48:16
);

  wire [4:0]  io_exceptionFlags_0;
  wire [32:0] io_out_0;
  wire [64:0] io_in_0 = io_in;
  wire [2:0]  io_roundingMode_0 = io_roundingMode;
  wire        io_detectTininess = 1'h1;	// hardfloat/hardfloat/src/main/scala/RecFNToRecFN.scala:48:16, :72:19
  wire [11:0] rawIn_exp = io_in_0[63:52];	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21
  wire        rawIn_isZero = rawIn_exp[11:9] == 3'h0;	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :52:{28,53}
  wire        rawIn_isZero_0 = rawIn_isZero;	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:52:53, :55:23
  wire        rawIn_isSpecial = &(rawIn_exp[11:10]);	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :53:{28,53}
  wire        rawIn_isNaN = rawIn_isSpecial & rawIn_exp[9];	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :53:53, :55:23, :56:{33,41}
  wire        rawIn_isInf = rawIn_isSpecial & ~(rawIn_exp[9]);	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :53:53, :55:23, :56:41, :57:{33,36}
  wire        rawIn_sign = io_in_0[64];	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23, :59:25
  wire [12:0] rawIn_sExp = {1'h0, rawIn_exp};	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :55:23, :60:27
  wire [53:0] rawIn_sig = {1'h0, ~rawIn_isZero, io_in_0[51:0]};	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:52:53, :55:23, :61:{35,44,49}
  RoundAnyRawFNToRecFN_3 roundAnyRawFNToRecFN (	// hardfloat/hardfloat/src/main/scala/RecFNToRecFN.scala:72:19
    .io_invalidExc     (rawIn_isNaN & ~(rawIn_sig[51])),	// hardfloat/hardfloat/src/main/scala/common.scala:82:{46,49,56}, hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
    .io_in_isNaN       (rawIn_isNaN),	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
    .io_in_isInf       (rawIn_isInf),	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
    .io_in_isZero      (rawIn_isZero_0),	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
    .io_in_sign        (rawIn_sign),	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
    .io_in_sExp        (rawIn_sExp),	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
    .io_in_sig         (rawIn_sig),	// hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:55:23
    .io_roundingMode   (io_roundingMode_0),
    .io_out            (io_out_0),
    .io_exceptionFlags (io_exceptionFlags_0)
  );	// hardfloat/hardfloat/src/main/scala/RecFNToRecFN.scala:72:19
  assign io_out = io_out_0;
  assign io_exceptionFlags = io_exceptionFlags_0;
endmodule


// Generated by CIRCT firtool-1.66.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module RoundAnyRawFNToRecFN_1(
  input         io_in_isZero,	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:57:16
                io_in_sign,	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:57:16
  input  [8:0]  io_in_sExp,	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:57:16
  input  [64:0] io_in_sig,	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:57:16
  input  [2:0]  io_roundingMode,	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:57:16
  output [32:0] io_out,	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:57:16
  output [4:0]  io_exceptionFlags	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:57:16
);

  wire        io_in_isZero_0 = io_in_isZero;
  wire        io_in_sign_0 = io_in_sign;
  wire [8:0]  io_in_sExp_0 = io_in_sExp;
  wire [64:0] io_in_sig_0 = io_in_sig;
  wire [2:0]  io_roundingMode_0 = io_roundingMode;
  wire [26:0] roundMask = 27'h3;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:152:55
  wire [26:0] shiftedRoundMask = 27'h1;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:161:53
  wire [26:0] roundPosMask = 27'h2;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:162:46
  wire        io_detectTininess = 1'h1;
  wire        io_invalidExc = 1'h0;
  wire        io_infiniteExc = 1'h0;
  wire        io_in_isNaN = 1'h0;
  wire        io_in_isInf = 1'h0;
  wire        common_overflow = 1'h0;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:123:37
  wire        common_totalUnderflow = 1'h0;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:124:37
  wire        common_underflow = 1'h0;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:125:37
  wire        isNaNOut = 1'h0;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:234:34
  wire        notNaN_isSpecialInfOut = 1'h0;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:235:49
  wire        overflow = 1'h0;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:237:32
  wire        underflow = 1'h0;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:238:32
  wire        pegMinNonzeroMagOut = 1'h0;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:244:45
  wire        pegMaxFiniteMagOut = 1'h0;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:245:39
  wire        notNaN_isInfOut = 1'h0;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:247:32
  wire        signOut = io_in_sign_0;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:249:22
  wire        roundingMode_near_even = io_roundingMode_0 == 3'h0;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:89:53
  wire        roundingMode_minMag = io_roundingMode_0 == 3'h1;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:90:53
  wire        roundingMode_min = io_roundingMode_0 == 3'h2;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:91:53
  wire        roundingMode_max = io_roundingMode_0 == 3'h3;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:92:53
  wire        roundingMode_near_maxMag = io_roundingMode_0 == 3'h4;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:93:53
  wire        roundingMode_odd = io_roundingMode_0 == 3'h6;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:94:53
  wire        roundMagUp =
    roundingMode_min & io_in_sign_0 | roundingMode_max & ~io_in_sign_0;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:91:53, :92:53, :97:{27,42,63,66}
  wire [9:0]  sAdjustedExp = {1'h0, io_in_sExp_0 + 9'h80};	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:103:25, :105:31
  wire [26:0] adjustedSig = {io_in_sig_0[64:39], |(io_in_sig_0[38:0])};	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:115:{23,66}, :116:{26,60}
  wire        anyRound;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:165:36
  wire        roundPosBit = adjustedSig[1];	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:115:66, :163:{40,56}
  wire        anyRoundExtra = adjustedSig[0];	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:115:66, :164:{42,62}
  assign anyRound = roundPosBit | anyRoundExtra;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:163:56, :164:62, :165:36
  wire        common_inexact = anyRound;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:126:37, :165:36
  wire        _overflow_roundMagUp_T = roundingMode_near_even | roundingMode_near_maxMag;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:89:53, :93:53, :168:38
  wire        roundIncr = _overflow_roundMagUp_T & roundPosBit | roundMagUp & anyRound;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:97:42, :163:56, :165:36, :168:{38,67}, :169:31, :170:29
  wire [25:0] roundedSig =
    roundIncr
      ? {1'h0, adjustedSig[26:2]} + 26'h1
        & {25'h1FFFFFF, ~(roundingMode_near_even & roundPosBit & ~anyRoundExtra)}
      : {1'h0, adjustedSig[26:3], adjustedSig[2] | roundingMode_odd & anyRound};	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:89:53, :94:53, :115:66, :163:56, :164:62, :165:36, :169:31, :172:16, :173:{49,57}, :174:{21,25,49,64}, :175:30, :176:35, :179:47, :180:{42,67}
  wire [10:0] sRoundedExp = {sAdjustedExp[9], sAdjustedExp} + {9'h0, roundedSig[25:24]};	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:105:31, :172:16, :184:{40,54}
  wire [8:0]  common_expOut = sRoundedExp[8:0];	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:121:31, :184:40, :186:37
  wire [22:0] common_fractOut = roundedSig[22:0];	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:122:31, :172:16, :190:27
  wire        unboundedRange_roundPosBit = adjustedSig[1];	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:115:66, :202:{16,61}
  wire        unboundedRange_anyRound = |(adjustedSig[1:0]);	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:115:66, :204:{49,63,70}
  wire        unboundedRange_roundIncr =
    _overflow_roundMagUp_T & unboundedRange_roundPosBit | roundMagUp
    & unboundedRange_anyRound;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:97:42, :168:38, :202:16, :204:49, :206:67, :207:46, :208:29
  wire        roundCarry = roundedSig[24];	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:172:16, :210:16, :212:27
  wire        commonCase = ~io_in_isZero_0;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:236:{61,64}
  wire        inexact = commonCase & common_inexact;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:126:37, :236:61, :239:{28,43}
  wire        overflow_roundMagUp = _overflow_roundMagUp_T | roundMagUp;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:97:42, :168:38, :242:60
  wire [8:0]  expOut = common_expOut & ~(io_in_isZero_0 ? 9'h1C0 : 9'h0);	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:121:31, :251:24, :252:{14,18}, :276:73
  wire [22:0] fractOut = io_in_isZero_0 ? 23'h0 : common_fractOut;	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:122:31, :279:12, :280:16, :282:11, :283:13
  wire [32:0] io_out_0 = {signOut, expOut, fractOut};	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:249:22, :276:73, :282:11, :285:33
  wire [4:0]  io_exceptionFlags_0 = {4'h0, inexact};	// hardfloat/hardfloat/src/main/scala/RoundAnyRawFNToRecFN.scala:239:28, :287:{53,66}
  assign io_out = io_out_0;
  assign io_exceptionFlags = io_exceptionFlags_0;
endmodule


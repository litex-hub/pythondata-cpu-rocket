// Generated by CIRCT firtool-1.66.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module MulDiv(
  input         clock,
                reset,
  output        io_req_ready,	// src/main/scala/rocket/Multiplier.scala:42:14
  input         io_req_valid,	// src/main/scala/rocket/Multiplier.scala:42:14
  input  [3:0]  io_req_bits_fn,	// src/main/scala/rocket/Multiplier.scala:42:14
  input         io_req_bits_dw,	// src/main/scala/rocket/Multiplier.scala:42:14
  input  [63:0] io_req_bits_in1,	// src/main/scala/rocket/Multiplier.scala:42:14
                io_req_bits_in2,	// src/main/scala/rocket/Multiplier.scala:42:14
  input  [4:0]  io_req_bits_tag,	// src/main/scala/rocket/Multiplier.scala:42:14
  input         io_kill,	// src/main/scala/rocket/Multiplier.scala:42:14
                io_resp_ready,	// src/main/scala/rocket/Multiplier.scala:42:14
  output        io_resp_valid,	// src/main/scala/rocket/Multiplier.scala:42:14
  output [63:0] io_resp_bits_data,	// src/main/scala/rocket/Multiplier.scala:42:14
  output [4:0]  io_resp_bits_tag	// src/main/scala/rocket/Multiplier.scala:42:14
);

  wire         io_req_valid_0 = io_req_valid;
  wire [3:0]   io_req_bits_fn_0 = io_req_bits_fn;
  wire         io_req_bits_dw_0 = io_req_bits_dw;
  wire [63:0]  io_req_bits_in1_0 = io_req_bits_in1;
  wire [63:0]  io_req_bits_in2_0 = io_req_bits_in2;
  wire [4:0]   io_req_bits_tag_0 = io_req_bits_tag;
  wire         io_kill_0 = io_kill;
  wire         io_resp_ready_0 = io_resp_ready;
  wire [5:0]   alignMask = 6'h3F;	// src/main/scala/rocket/Multiplier.scala:146:23
  reg  [2:0]   state;	// src/main/scala/rocket/Multiplier.scala:48:22
  reg  [3:0]   req_fn;	// src/main/scala/rocket/Multiplier.scala:50:16
  reg          req_dw;	// src/main/scala/rocket/Multiplier.scala:50:16
  reg  [63:0]  req_in1;	// src/main/scala/rocket/Multiplier.scala:50:16
  reg  [63:0]  req_in2;	// src/main/scala/rocket/Multiplier.scala:50:16
  reg  [4:0]   req_tag;	// src/main/scala/rocket/Multiplier.scala:50:16
  wire [4:0]   io_resp_bits_tag_0 = req_tag;	// src/main/scala/rocket/Multiplier.scala:50:16
  reg  [6:0]   count;	// src/main/scala/rocket/Multiplier.scala:51:18
  reg          neg_out;	// src/main/scala/rocket/Multiplier.scala:54:20
  reg          isHi;	// src/main/scala/rocket/Multiplier.scala:55:17
  reg          resHi;	// src/main/scala/rocket/Multiplier.scala:56:18
  reg  [64:0]  divisor;	// src/main/scala/rocket/Multiplier.scala:57:20
  wire [64:0]  mpcand = divisor;	// src/main/scala/rocket/Multiplier.scala:57:20, :108:26
  reg  [129:0] remainder;	// src/main/scala/rocket/Multiplier.scala:58:22
  wire [2:0]   decoded_plaInput;	// src/main/scala/chisel3/util/pla.scala:77:22
  wire [2:0]   decoded_invInputs = ~decoded_plaInput;	// src/main/scala/chisel3/util/pla.scala:77:22, :78:21
  wire [3:0]   decoded_invMatrixOutputs;	// src/main/scala/chisel3/util/pla.scala:120:37
  wire         decoded_andMatrixInput_0 = decoded_invInputs[0];	// src/main/scala/chisel3/util/pla.scala:78:21, :91:29
  wire         decoded_andMatrixInput_0_5 = decoded_invInputs[0];	// src/main/scala/chisel3/util/pla.scala:78:21, :91:29
  wire         decoded_andMatrixInput_0_1 = decoded_invInputs[2];	// src/main/scala/chisel3/util/pla.scala:78:21, :91:29
  wire         decoded_andMatrixInput_1 = decoded_invInputs[2];	// src/main/scala/chisel3/util/pla.scala:78:21, :91:29
  wire         decoded_andMatrixInput_1_1 = decoded_invInputs[2];	// src/main/scala/chisel3/util/pla.scala:78:21, :91:29
  wire         decoded_andMatrixInput_0_2 = decoded_invInputs[1];	// src/main/scala/chisel3/util/pla.scala:78:21, :91:29
  wire [1:0]   _decoded_T_2 = {decoded_andMatrixInput_0_2, decoded_andMatrixInput_1};	// src/main/scala/chisel3/util/pla.scala:91:29, :98:53
  wire         decoded_andMatrixInput_0_3 = decoded_plaInput[0];	// src/main/scala/chisel3/util/pla.scala:77:22, :90:45
  wire         decoded_andMatrixInput_0_4 = decoded_plaInput[1];	// src/main/scala/chisel3/util/pla.scala:77:22, :90:45
  wire         decoded_andMatrixInput_1_2 = decoded_plaInput[2];	// src/main/scala/chisel3/util/pla.scala:77:22, :90:45
  wire [1:0]   decoded_orMatrixOutputs_lo =
    {|{decoded_andMatrixInput_0, &_decoded_T_2},
     |{&_decoded_T_2, &{decoded_andMatrixInput_0_5, decoded_andMatrixInput_1_2}}};	// src/main/scala/chisel3/util/pla.scala:90:45, :91:29, :98:{53,70}, :102:36, :114:{19,36}
  wire [1:0]   decoded_orMatrixOutputs_hi =
    {decoded_andMatrixInput_0_1,
     |{&{decoded_andMatrixInput_0_3, decoded_andMatrixInput_1_1},
       decoded_andMatrixInput_0_4}};	// src/main/scala/chisel3/util/pla.scala:90:45, :91:29, :98:{53,70}, :102:36, :114:{19,36}
  wire [3:0]   decoded_orMatrixOutputs =
    {decoded_orMatrixOutputs_hi, decoded_orMatrixOutputs_lo};	// src/main/scala/chisel3/util/pla.scala:102:36
  wire [1:0]   decoded_invMatrixOutputs_lo = decoded_orMatrixOutputs[1:0];	// src/main/scala/chisel3/util/pla.scala:102:36, :120:37
  wire [1:0]   decoded_invMatrixOutputs_hi = decoded_orMatrixOutputs[3:2];	// src/main/scala/chisel3/util/pla.scala:102:36, :120:37
  assign decoded_invMatrixOutputs =
    {decoded_invMatrixOutputs_hi, decoded_invMatrixOutputs_lo};	// src/main/scala/chisel3/util/pla.scala:120:37
  wire [3:0]   decoded = decoded_invMatrixOutputs;	// src/main/scala/chisel3/util/pla.scala:81:23, :120:37
  assign decoded_plaInput = io_req_bits_fn_0[2:0];	// src/main/scala/chisel3/util/experimental/decode/decoder.scala:39:16, src/main/scala/chisel3/util/pla.scala:77:22
  wire         cmdMul = decoded[3];	// src/main/scala/chisel3/util/pla.scala:81:23, src/main/scala/rocket/Decode.scala:50:77, src/main/scala/rocket/Multiplier.scala:72:107
  wire         cmdHi = decoded[2];	// src/main/scala/chisel3/util/pla.scala:81:23, src/main/scala/rocket/Decode.scala:50:77, src/main/scala/rocket/Multiplier.scala:72:107
  wire         lhsSigned = decoded[1];	// src/main/scala/chisel3/util/pla.scala:81:23, src/main/scala/rocket/Decode.scala:50:77, src/main/scala/rocket/Multiplier.scala:72:107
  wire         rhsSigned = decoded[0];	// src/main/scala/chisel3/util/pla.scala:81:23, src/main/scala/rocket/Decode.scala:50:77, src/main/scala/rocket/Multiplier.scala:72:107
  wire         lhs_sign =
    lhsSigned & (io_req_bits_dw_0 ? io_req_bits_in1_0[63] : io_req_bits_in1_0[31]);	// src/main/scala/rocket/Multiplier.scala:72:107, :78:{23,29,38,48}
  wire [31:0]  hi = io_req_bits_dw_0 ? io_req_bits_in1_0[63:32] : {32{lhs_sign}};	// src/main/scala/rocket/Multiplier.scala:78:23, :79:{17,29,43}
  wire [63:0]  lhs_in = {hi, io_req_bits_in1_0[31:0]};	// src/main/scala/rocket/Multiplier.scala:79:17, :80:{9,15}
  wire         rhs_sign =
    rhsSigned & (io_req_bits_dw_0 ? io_req_bits_in2_0[63] : io_req_bits_in2_0[31]);	// src/main/scala/rocket/Multiplier.scala:72:107, :78:{23,29,38,48}
  wire [31:0]  hi_1 = io_req_bits_dw_0 ? io_req_bits_in2_0[63:32] : {32{rhs_sign}};	// src/main/scala/rocket/Multiplier.scala:78:23, :79:{17,29,43}
  wire [63:0]  rhs_in = {hi_1, io_req_bits_in2_0[31:0]};	// src/main/scala/rocket/Multiplier.scala:79:17, :80:{9,15}
  wire [64:0]  subtractor = remainder[128:64] - divisor;	// src/main/scala/rocket/Multiplier.scala:57:20, :58:22, :85:{29,37}
  wire [63:0]  result = resHi ? remainder[128:65] : remainder[63:0];	// src/main/scala/rocket/Multiplier.scala:56:18, :58:22, :86:{19,36,57}
  wire [63:0]  negated_remainder = 64'h0 - result;	// src/main/scala/rocket/Multiplier.scala:86:19, :87:27
  wire [128:0] mulReg = {remainder[129:65], remainder[63:0]};	// src/main/scala/rocket/Multiplier.scala:58:22, :86:57, :104:{21,31}
  wire         mplierSign = remainder[64];	// src/main/scala/rocket/Multiplier.scala:58:22, :105:31
  wire [63:0]  mplier = mulReg[63:0];	// src/main/scala/rocket/Multiplier.scala:104:21, :106:24
  wire [64:0]  accum = mulReg[128:64];	// src/main/scala/rocket/Multiplier.scala:104:21, :107:{23,37}
  wire [73:0]  prod =
    {{66{mplierSign}}, mplier[7:0]} * {{9{mpcand[64]}}, mpcand} + {{9{accum[64]}}, accum};	// src/main/scala/rocket/Multiplier.scala:105:31, :106:24, :107:37, :108:26, :109:{38,67,76}
  wire [73:0]  nextMulReg_hi = prod;	// src/main/scala/rocket/Multiplier.scala:109:76, :110:25
  wire [129:0] nextMulReg = {nextMulReg_hi, mplier[63:8]};	// src/main/scala/rocket/Multiplier.scala:106:24, :110:{25,38}
  wire         nextMplierSign = count == 7'h6 & neg_out;	// src/main/scala/rocket/Multiplier.scala:51:18, :54:20, :111:{32,61}
  wire [64:0]  _eOutMask_T_2 =
    $signed(65'sh10000000000000000 >>> {59'h0, count[2:0], 3'h0});	// src/main/scala/rocket/Multiplier.scala:51:18, :113:{44,72}
  wire [63:0]  eOutMask = _eOutMask_T_2[63:0];	// src/main/scala/rocket/Multiplier.scala:113:{44,91}
  wire         eOut = count != 7'h7 & (|count) & ~isHi & (mplier & ~eOutMask) == 64'h0;	// src/main/scala/rocket/Multiplier.scala:51:18, :55:17, :106:24, :113:91, :114:{45,74,83,91}, :115:{7,13,24,26,37}
  wire [128:0] eOutRes = mulReg >> 6'h0 - {count[2:0], 3'h0};	// src/main/scala/rocket/Multiplier.scala:51:18, :104:21, :113:72, :116:{27,38}
  wire [128:0] nextMulReg1 =
    {nextMulReg[128:64], eOut ? eOutRes[63:0] : nextMulReg[63:0]};	// src/main/scala/rocket/Multiplier.scala:110:25, :115:13, :116:27, :117:{26,37,55}
  wire [65:0]  remainder_hi = {nextMulReg1[128:64], nextMplierSign};	// src/main/scala/rocket/Multiplier.scala:111:61, :117:26, :118:{21,34}
  wire         unrolls_less = subtractor[64];	// src/main/scala/rocket/Multiplier.scala:85:37, :130:28
  wire [127:0] unrolls_hi =
    {unrolls_less ? remainder[127:64] : subtractor[63:0], remainder[63:0]};	// src/main/scala/rocket/Multiplier.scala:58:22, :85:37, :86:57, :130:28, :131:{10,14,24,45}
  wire [128:0] unrolls_0 = {unrolls_hi, ~unrolls_less};	// src/main/scala/rocket/Multiplier.scala:130:28, :131:{10,67}
  wire         _eOut_T_9 = count == 7'h0;	// src/main/scala/rocket/Multiplier.scala:51:18, :113:54, :143:24
  wire         divby0 = _eOut_T_9 & ~unrolls_less;	// src/main/scala/rocket/Multiplier.scala:130:28, :143:{24,32,35}
  wire [31:0]  divisorMSB_hi = divisor[63:32];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, src/main/scala/rocket/Multiplier.scala:57:20, :147:36
  wire [31:0]  divisorMSB_lo = divisor[31:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17, src/main/scala/rocket/Multiplier.scala:57:20, :147:36
  wire         divisorMSB_useHi = |divisorMSB_hi;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [15:0]  divisorMSB_hi_1 = divisorMSB_hi[31:16];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17
  wire [15:0]  divisorMSB_lo_1 = divisorMSB_hi[15:0];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire         divisorMSB_useHi_1 = |divisorMSB_hi_1;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [7:0]   divisorMSB_hi_2 = divisorMSB_hi_1[15:8];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17
  wire [7:0]   divisorMSB_lo_2 = divisorMSB_hi_1[7:0];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire         divisorMSB_useHi_2 = |divisorMSB_hi_2;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   divisorMSB_hi_3 = divisorMSB_hi_2[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17
  wire [3:0]   divisorMSB_lo_3 = divisorMSB_hi_2[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire         divisorMSB_useHi_3 = |divisorMSB_hi_3;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   divisorMSB_hi_4 = divisorMSB_lo_2[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire [3:0]   divisorMSB_lo_4 = divisorMSB_lo_2[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17
  wire         divisorMSB_useHi_4 = |divisorMSB_hi_4;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [7:0]   divisorMSB_hi_5 = divisorMSB_lo_1[15:8];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire [7:0]   divisorMSB_lo_5 = divisorMSB_lo_1[7:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17
  wire         divisorMSB_useHi_5 = |divisorMSB_hi_5;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   divisorMSB_hi_6 = divisorMSB_hi_5[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17
  wire [3:0]   divisorMSB_lo_6 = divisorMSB_hi_5[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire         divisorMSB_useHi_6 = |divisorMSB_hi_6;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   divisorMSB_hi_7 = divisorMSB_lo_5[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire [3:0]   divisorMSB_lo_7 = divisorMSB_lo_5[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17
  wire         divisorMSB_useHi_7 = |divisorMSB_hi_7;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [15:0]  divisorMSB_hi_8 = divisorMSB_lo[31:16];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire [15:0]  divisorMSB_lo_8 = divisorMSB_lo[15:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17
  wire         divisorMSB_useHi_8 = |divisorMSB_hi_8;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [7:0]   divisorMSB_hi_9 = divisorMSB_hi_8[15:8];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17
  wire [7:0]   divisorMSB_lo_9 = divisorMSB_hi_8[7:0];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire         divisorMSB_useHi_9 = |divisorMSB_hi_9;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   divisorMSB_hi_10 = divisorMSB_hi_9[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17
  wire [3:0]   divisorMSB_lo_10 = divisorMSB_hi_9[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire         divisorMSB_useHi_10 = |divisorMSB_hi_10;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   divisorMSB_hi_11 = divisorMSB_lo_9[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire [3:0]   divisorMSB_lo_11 = divisorMSB_lo_9[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17
  wire         divisorMSB_useHi_11 = |divisorMSB_hi_11;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [7:0]   divisorMSB_hi_12 = divisorMSB_lo_8[15:8];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire [7:0]   divisorMSB_lo_12 = divisorMSB_lo_8[7:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17
  wire         divisorMSB_useHi_12 = |divisorMSB_hi_12;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   divisorMSB_hi_13 = divisorMSB_hi_12[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17
  wire [3:0]   divisorMSB_lo_13 = divisorMSB_hi_12[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire         divisorMSB_useHi_13 = |divisorMSB_hi_13;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   divisorMSB_hi_14 = divisorMSB_lo_12[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire [3:0]   divisorMSB_lo_14 = divisorMSB_lo_12[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17
  wire         divisorMSB_useHi_14 = |divisorMSB_hi_14;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [5:0]   divisorMSB =
    {divisorMSB_useHi,
     divisorMSB_useHi
       ? {divisorMSB_useHi_1,
          divisorMSB_useHi_1
            ? {divisorMSB_useHi_2,
               divisorMSB_useHi_2
                 ? {divisorMSB_useHi_3,
                    divisorMSB_useHi_3
                      ? (divisorMSB_hi_3[3]
                           ? 2'h3
                           : divisorMSB_hi_3[2] ? 2'h2 : {1'h0, divisorMSB_hi_3[1]})
                      : divisorMSB_lo_3[3]
                          ? 2'h3
                          : divisorMSB_lo_3[2] ? 2'h2 : {1'h0, divisorMSB_lo_3[1]}}
                 : {divisorMSB_useHi_4,
                    divisorMSB_useHi_4
                      ? (divisorMSB_hi_4[3]
                           ? 2'h3
                           : divisorMSB_hi_4[2] ? 2'h2 : {1'h0, divisorMSB_hi_4[1]})
                      : divisorMSB_lo_4[3]
                          ? 2'h3
                          : divisorMSB_lo_4[2] ? 2'h2 : {1'h0, divisorMSB_lo_4[1]}}}
            : {divisorMSB_useHi_5,
               divisorMSB_useHi_5
                 ? {divisorMSB_useHi_6,
                    divisorMSB_useHi_6
                      ? (divisorMSB_hi_6[3]
                           ? 2'h3
                           : divisorMSB_hi_6[2] ? 2'h2 : {1'h0, divisorMSB_hi_6[1]})
                      : divisorMSB_lo_6[3]
                          ? 2'h3
                          : divisorMSB_lo_6[2] ? 2'h2 : {1'h0, divisorMSB_lo_6[1]}}
                 : {divisorMSB_useHi_7,
                    divisorMSB_useHi_7
                      ? (divisorMSB_hi_7[3]
                           ? 2'h3
                           : divisorMSB_hi_7[2] ? 2'h2 : {1'h0, divisorMSB_hi_7[1]})
                      : divisorMSB_lo_7[3]
                          ? 2'h3
                          : divisorMSB_lo_7[2] ? 2'h2 : {1'h0, divisorMSB_lo_7[1]}}}}
       : {divisorMSB_useHi_8,
          divisorMSB_useHi_8
            ? {divisorMSB_useHi_9,
               divisorMSB_useHi_9
                 ? {divisorMSB_useHi_10,
                    divisorMSB_useHi_10
                      ? (divisorMSB_hi_10[3]
                           ? 2'h3
                           : divisorMSB_hi_10[2] ? 2'h2 : {1'h0, divisorMSB_hi_10[1]})
                      : divisorMSB_lo_10[3]
                          ? 2'h3
                          : divisorMSB_lo_10[2] ? 2'h2 : {1'h0, divisorMSB_lo_10[1]}}
                 : {divisorMSB_useHi_11,
                    divisorMSB_useHi_11
                      ? (divisorMSB_hi_11[3]
                           ? 2'h3
                           : divisorMSB_hi_11[2] ? 2'h2 : {1'h0, divisorMSB_hi_11[1]})
                      : divisorMSB_lo_11[3]
                          ? 2'h3
                          : divisorMSB_lo_11[2] ? 2'h2 : {1'h0, divisorMSB_lo_11[1]}}}
            : {divisorMSB_useHi_12,
               divisorMSB_useHi_12
                 ? {divisorMSB_useHi_13,
                    divisorMSB_useHi_13
                      ? (divisorMSB_hi_13[3]
                           ? 2'h3
                           : divisorMSB_hi_13[2] ? 2'h2 : {1'h0, divisorMSB_hi_13[1]})
                      : divisorMSB_lo_13[3]
                          ? 2'h3
                          : divisorMSB_lo_13[2] ? 2'h2 : {1'h0, divisorMSB_lo_13[1]}}
                 : {divisorMSB_useHi_14,
                    divisorMSB_useHi_14
                      ? (divisorMSB_hi_14[3]
                           ? 2'h3
                           : divisorMSB_hi_14[2] ? 2'h2 : {1'h0, divisorMSB_hi_14[1]})
                      : divisorMSB_lo_14[3]
                          ? 2'h3
                          : divisorMSB_lo_14[2] ? 2'h2 : {1'h0, divisorMSB_lo_14[1]}}}}};	// src/main/scala/chisel3/util/CircuitMath.scala:28:8, :30:{10,12}, :33:17, :34:17, :35:22, :36:{10,21}, src/main/scala/rocket/Multiplier.scala:147:48
  wire [31:0]  dividendMSB_hi = remainder[63:32];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, src/main/scala/rocket/Multiplier.scala:58:22, :86:57
  wire [31:0]  dividendMSB_lo = remainder[31:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17, src/main/scala/rocket/Multiplier.scala:58:22, :86:57
  wire         dividendMSB_useHi = |dividendMSB_hi;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [15:0]  dividendMSB_hi_1 = dividendMSB_hi[31:16];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17
  wire [15:0]  dividendMSB_lo_1 = dividendMSB_hi[15:0];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire         dividendMSB_useHi_1 = |dividendMSB_hi_1;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [7:0]   dividendMSB_hi_2 = dividendMSB_hi_1[15:8];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17
  wire [7:0]   dividendMSB_lo_2 = dividendMSB_hi_1[7:0];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire         dividendMSB_useHi_2 = |dividendMSB_hi_2;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   dividendMSB_hi_3 = dividendMSB_hi_2[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17
  wire [3:0]   dividendMSB_lo_3 = dividendMSB_hi_2[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire         dividendMSB_useHi_3 = |dividendMSB_hi_3;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   dividendMSB_hi_4 = dividendMSB_lo_2[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire [3:0]   dividendMSB_lo_4 = dividendMSB_lo_2[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17
  wire         dividendMSB_useHi_4 = |dividendMSB_hi_4;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [7:0]   dividendMSB_hi_5 = dividendMSB_lo_1[15:8];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire [7:0]   dividendMSB_lo_5 = dividendMSB_lo_1[7:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17
  wire         dividendMSB_useHi_5 = |dividendMSB_hi_5;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   dividendMSB_hi_6 = dividendMSB_hi_5[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17
  wire [3:0]   dividendMSB_lo_6 = dividendMSB_hi_5[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire         dividendMSB_useHi_6 = |dividendMSB_hi_6;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   dividendMSB_hi_7 = dividendMSB_lo_5[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire [3:0]   dividendMSB_lo_7 = dividendMSB_lo_5[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17
  wire         dividendMSB_useHi_7 = |dividendMSB_hi_7;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [15:0]  dividendMSB_hi_8 = dividendMSB_lo[31:16];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire [15:0]  dividendMSB_lo_8 = dividendMSB_lo[15:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17
  wire         dividendMSB_useHi_8 = |dividendMSB_hi_8;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [7:0]   dividendMSB_hi_9 = dividendMSB_hi_8[15:8];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17
  wire [7:0]   dividendMSB_lo_9 = dividendMSB_hi_8[7:0];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire         dividendMSB_useHi_9 = |dividendMSB_hi_9;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   dividendMSB_hi_10 = dividendMSB_hi_9[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17
  wire [3:0]   dividendMSB_lo_10 = dividendMSB_hi_9[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire         dividendMSB_useHi_10 = |dividendMSB_hi_10;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   dividendMSB_hi_11 = dividendMSB_lo_9[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire [3:0]   dividendMSB_lo_11 = dividendMSB_lo_9[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17
  wire         dividendMSB_useHi_11 = |dividendMSB_hi_11;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [7:0]   dividendMSB_hi_12 = dividendMSB_lo_8[15:8];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire [7:0]   dividendMSB_lo_12 = dividendMSB_lo_8[7:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17
  wire         dividendMSB_useHi_12 = |dividendMSB_hi_12;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   dividendMSB_hi_13 = dividendMSB_hi_12[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17
  wire [3:0]   dividendMSB_lo_13 = dividendMSB_hi_12[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire         dividendMSB_useHi_13 = |dividendMSB_hi_13;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [3:0]   dividendMSB_hi_14 = dividendMSB_lo_12[7:4];	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :34:17
  wire [3:0]   dividendMSB_lo_14 = dividendMSB_lo_12[3:0];	// src/main/scala/chisel3/util/CircuitMath.scala:34:17
  wire         dividendMSB_useHi_14 = |dividendMSB_hi_14;	// src/main/scala/chisel3/util/CircuitMath.scala:33:17, :35:22
  wire [5:0]   dividendMSB =
    {dividendMSB_useHi,
     dividendMSB_useHi
       ? {dividendMSB_useHi_1,
          dividendMSB_useHi_1
            ? {dividendMSB_useHi_2,
               dividendMSB_useHi_2
                 ? {dividendMSB_useHi_3,
                    dividendMSB_useHi_3
                      ? (dividendMSB_hi_3[3]
                           ? 2'h3
                           : dividendMSB_hi_3[2] ? 2'h2 : {1'h0, dividendMSB_hi_3[1]})
                      : dividendMSB_lo_3[3]
                          ? 2'h3
                          : dividendMSB_lo_3[2] ? 2'h2 : {1'h0, dividendMSB_lo_3[1]}}
                 : {dividendMSB_useHi_4,
                    dividendMSB_useHi_4
                      ? (dividendMSB_hi_4[3]
                           ? 2'h3
                           : dividendMSB_hi_4[2] ? 2'h2 : {1'h0, dividendMSB_hi_4[1]})
                      : dividendMSB_lo_4[3]
                          ? 2'h3
                          : dividendMSB_lo_4[2] ? 2'h2 : {1'h0, dividendMSB_lo_4[1]}}}
            : {dividendMSB_useHi_5,
               dividendMSB_useHi_5
                 ? {dividendMSB_useHi_6,
                    dividendMSB_useHi_6
                      ? (dividendMSB_hi_6[3]
                           ? 2'h3
                           : dividendMSB_hi_6[2] ? 2'h2 : {1'h0, dividendMSB_hi_6[1]})
                      : dividendMSB_lo_6[3]
                          ? 2'h3
                          : dividendMSB_lo_6[2] ? 2'h2 : {1'h0, dividendMSB_lo_6[1]}}
                 : {dividendMSB_useHi_7,
                    dividendMSB_useHi_7
                      ? (dividendMSB_hi_7[3]
                           ? 2'h3
                           : dividendMSB_hi_7[2] ? 2'h2 : {1'h0, dividendMSB_hi_7[1]})
                      : dividendMSB_lo_7[3]
                          ? 2'h3
                          : dividendMSB_lo_7[2] ? 2'h2 : {1'h0, dividendMSB_lo_7[1]}}}}
       : {dividendMSB_useHi_8,
          dividendMSB_useHi_8
            ? {dividendMSB_useHi_9,
               dividendMSB_useHi_9
                 ? {dividendMSB_useHi_10,
                    dividendMSB_useHi_10
                      ? (dividendMSB_hi_10[3]
                           ? 2'h3
                           : dividendMSB_hi_10[2] ? 2'h2 : {1'h0, dividendMSB_hi_10[1]})
                      : dividendMSB_lo_10[3]
                          ? 2'h3
                          : dividendMSB_lo_10[2] ? 2'h2 : {1'h0, dividendMSB_lo_10[1]}}
                 : {dividendMSB_useHi_11,
                    dividendMSB_useHi_11
                      ? (dividendMSB_hi_11[3]
                           ? 2'h3
                           : dividendMSB_hi_11[2] ? 2'h2 : {1'h0, dividendMSB_hi_11[1]})
                      : dividendMSB_lo_11[3]
                          ? 2'h3
                          : dividendMSB_lo_11[2] ? 2'h2 : {1'h0, dividendMSB_lo_11[1]}}}
            : {dividendMSB_useHi_12,
               dividendMSB_useHi_12
                 ? {dividendMSB_useHi_13,
                    dividendMSB_useHi_13
                      ? (dividendMSB_hi_13[3]
                           ? 2'h3
                           : dividendMSB_hi_13[2] ? 2'h2 : {1'h0, dividendMSB_hi_13[1]})
                      : dividendMSB_lo_13[3]
                          ? 2'h3
                          : dividendMSB_lo_13[2] ? 2'h2 : {1'h0, dividendMSB_lo_13[1]}}
                 : {dividendMSB_useHi_14,
                    dividendMSB_useHi_14
                      ? (dividendMSB_hi_14[3]
                           ? 2'h3
                           : dividendMSB_hi_14[2] ? 2'h2 : {1'h0, dividendMSB_hi_14[1]})
                      : dividendMSB_lo_14[3]
                          ? 2'h3
                          : dividendMSB_lo_14[2]
                              ? 2'h2
                              : {1'h0, dividendMSB_lo_14[1]}}}}};	// src/main/scala/chisel3/util/CircuitMath.scala:28:8, :30:{10,12}, :33:17, :34:17, :35:22, :36:{10,21}, src/main/scala/rocket/Multiplier.scala:148:51
  wire [5:0]   eOutPos = ~(dividendMSB - divisorMSB);	// src/main/scala/rocket/Multiplier.scala:147:48, :148:51, :149:{21,35}
  wire         eOut_1 = _eOut_T_9 & ~divby0 & (|eOutPos);	// src/main/scala/rocket/Multiplier.scala:143:{24,32}, :149:21, :150:{32,35,43,54}
  wire         outMul = ~(state[0]);	// src/main/scala/rocket/Multiplier.scala:48:22, :172:{23,52}
  wire [31:0]  loOut = ~req_dw & outMul ? result[63:32] : result[31:0];	// src/main/scala/rocket/Multiplier.scala:50:16, :75:60, :86:19, :172:52, :173:{18,48,65,82}
  wire [31:0]  hiOut = req_dw ? result[63:32] : {32{loOut[31]}};	// src/main/scala/rocket/Multiplier.scala:50:16, :86:19, :173:{18,65}, :174:{18,39,50}
  wire [63:0]  io_resp_bits_data_0 = {hiOut, loOut};	// src/main/scala/rocket/Multiplier.scala:173:18, :174:18, :177:27
  wire         io_resp_valid_0 = state == 3'h6 | (&state);	// src/main/scala/rocket/Multiplier.scala:48:22, :178:{27,42,51}
  wire         io_req_ready_0 = state == 3'h0;	// src/main/scala/rocket/Multiplier.scala:48:22, :179:25
  always @(posedge clock) begin
    automatic logic _GEN;	// src/main/scala/rocket/Multiplier.scala:89:39
    automatic logic _GEN_0;	// src/main/scala/rocket/Multiplier.scala:98:39
    automatic logic _GEN_1;	// src/main/scala/rocket/Multiplier.scala:103:39
    automatic logic _GEN_2;	// src/main/scala/rocket/Multiplier.scala:98:57, :103:50, :121:55, :122:13
    automatic logic _GEN_3;	// src/main/scala/rocket/Multiplier.scala:126:39
    automatic logic _GEN_4;	// src/main/scala/rocket/Multiplier.scala:135:17
    automatic logic _GEN_5;	// src/main/scala/chisel3/util/Decoupled.scala:52:35
    _GEN = state == 3'h1;	// src/main/scala/rocket/Multiplier.scala:48:22, :89:39
    _GEN_0 = state == 3'h5;	// src/main/scala/rocket/Multiplier.scala:48:22, :98:39
    _GEN_1 = state == 3'h2;	// src/main/scala/rocket/Multiplier.scala:48:22, :103:39
    _GEN_2 = _GEN_1 & (eOut | count == 7'h7);	// src/main/scala/rocket/Multiplier.scala:51:18, :98:57, :103:{39,50}, :115:13, :121:{16,25,55}, :122:13
    _GEN_3 = state == 3'h3;	// src/main/scala/rocket/Multiplier.scala:48:22, :126:39
    _GEN_4 = count == 7'h40;	// src/main/scala/rocket/Multiplier.scala:51:18, :135:17
    _GEN_5 = io_req_ready_0 & io_req_valid_0;	// src/main/scala/chisel3/util/Decoupled.scala:52:35
    if (reset)
      state <= 3'h0;	// src/main/scala/rocket/Multiplier.scala:48:22
    else if (_GEN_5)	// src/main/scala/chisel3/util/Decoupled.scala:52:35
      state <= cmdMul ? 3'h2 : {1'h0, ~(lhs_sign | rhs_sign), 1'h1};	// src/main/scala/rocket/Multiplier.scala:48:22, :72:107, :78:23, :162:{17,36,46}
    else if (io_resp_ready_0 & io_resp_valid_0 | io_kill_0)	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/rocket/Multiplier.scala:158:22
      state <= 3'h0;	// src/main/scala/rocket/Multiplier.scala:48:22
    else if (_GEN_3 & _GEN_4)	// src/main/scala/rocket/Multiplier.scala:103:50, :126:{39,50}, :135:{17,42}, :136:13
      state <= {1'h1, ~neg_out, 1'h1};	// src/main/scala/rocket/Multiplier.scala:48:22, :54:20, :136:19
    else if (_GEN_2)	// src/main/scala/rocket/Multiplier.scala:98:57, :103:50, :121:55, :122:13
      state <= 3'h6;	// src/main/scala/rocket/Multiplier.scala:48:22
    else if (_GEN_0)	// src/main/scala/rocket/Multiplier.scala:98:39
      state <= 3'h7;	// src/main/scala/rocket/Multiplier.scala:48:22
    else if (_GEN)	// src/main/scala/rocket/Multiplier.scala:89:39
      state <= 3'h3;	// src/main/scala/rocket/Multiplier.scala:48:22
    if (_GEN_5) begin	// src/main/scala/chisel3/util/Decoupled.scala:52:35
      req_fn <= io_req_bits_fn_0;	// src/main/scala/rocket/Multiplier.scala:50:16
      req_dw <= io_req_bits_dw_0;	// src/main/scala/rocket/Multiplier.scala:50:16
      req_in1 <= io_req_bits_in1_0;	// src/main/scala/rocket/Multiplier.scala:50:16
      req_in2 <= io_req_bits_in2_0;	// src/main/scala/rocket/Multiplier.scala:50:16
      req_tag <= io_req_bits_tag_0;	// src/main/scala/rocket/Multiplier.scala:50:16
      count <= {4'h0, cmdMul & ~io_req_bits_dw_0, 2'h0};	// src/main/scala/rocket/Multiplier.scala:51:18, :72:107, :75:60, :165:{11,46}
      neg_out <= cmdHi ? lhs_sign : lhs_sign != rhs_sign;	// src/main/scala/rocket/Multiplier.scala:54:20, :72:107, :78:23, :166:{19,46}
      isHi <= cmdHi;	// src/main/scala/rocket/Multiplier.scala:55:17, :72:107
      divisor <= {rhs_sign, rhs_in};	// src/main/scala/rocket/Multiplier.scala:57:20, :78:23, :80:9, :167:19
      remainder <= {66'h0, lhs_in};	// src/main/scala/rocket/Multiplier.scala:58:22, :80:9, :91:17, :168:15
    end
    else begin	// src/main/scala/chisel3/util/Decoupled.scala:52:35
      if (_GEN_3) begin	// src/main/scala/rocket/Multiplier.scala:126:39
        if (eOut_1) begin	// src/main/scala/rocket/Multiplier.scala:150:43
          count <= {1'h0, eOutPos};	// src/main/scala/rocket/Multiplier.scala:51:18, :149:21, :153:15
          remainder <= {3'h0, {63'h0, remainder[63:0]} << eOutPos};	// src/main/scala/rocket/Multiplier.scala:58:22, :86:57, :149:21, :152:{19,39}
        end
        else begin	// src/main/scala/rocket/Multiplier.scala:150:43
          count <= count + 7'h1;	// src/main/scala/rocket/Multiplier.scala:51:18, :141:20
          remainder <= {1'h0, unrolls_0};	// src/main/scala/rocket/Multiplier.scala:58:22, :131:10, :134:15
        end
      end
      else if (_GEN_1) begin	// src/main/scala/rocket/Multiplier.scala:103:39
        count <= count + 7'h1;	// src/main/scala/rocket/Multiplier.scala:51:18, :120:20
        remainder <= {remainder_hi, nextMulReg1[63:0]};	// src/main/scala/rocket/Multiplier.scala:58:22, :117:26, :118:{21,67}
      end
      else if (_GEN_0 | _GEN & remainder[63])	// src/main/scala/rocket/Multiplier.scala:58:22, :89:{39,57}, :90:{20,27}, :91:17, :98:{39,57}, :99:15
        remainder <= {66'h0, negated_remainder};	// src/main/scala/rocket/Multiplier.scala:58:22, :87:27, :91:17
      neg_out <= ~(_GEN_3 & divby0 & ~isHi) & neg_out;	// src/main/scala/rocket/Multiplier.scala:54:20, :55:17, :126:{39,50}, :143:32, :156:{18,21,28,38}
      if (_GEN & divisor[63])	// src/main/scala/rocket/Multiplier.scala:57:20, :89:{39,57}, :93:{18,25}, :94:15
        divisor <= subtractor;	// src/main/scala/rocket/Multiplier.scala:57:20, :85:37
    end
    resHi <= ~_GEN_5 & (_GEN_3 & _GEN_4 | _GEN_2 ? isHi : ~_GEN_0 & resHi);	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/rocket/Multiplier.scala:55:17, :56:18, :98:{39,57}, :101:11, :103:50, :121:55, :122:13, :123:13, :126:{39,50}, :135:{17,42}, :137:13, :161:22, :164:11
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM[0:10];
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'hB; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        state = _RANDOM[4'h0][2:0];	// src/main/scala/rocket/Multiplier.scala:48:22
        req_fn = _RANDOM[4'h0][6:3];	// src/main/scala/rocket/Multiplier.scala:48:22, :50:16
        req_dw = _RANDOM[4'h0][7];	// src/main/scala/rocket/Multiplier.scala:48:22, :50:16
        req_in1 = {_RANDOM[4'h0][31:8], _RANDOM[4'h1], _RANDOM[4'h2][7:0]};	// src/main/scala/rocket/Multiplier.scala:48:22, :50:16
        req_in2 = {_RANDOM[4'h2][31:8], _RANDOM[4'h3], _RANDOM[4'h4][7:0]};	// src/main/scala/rocket/Multiplier.scala:50:16
        req_tag = _RANDOM[4'h4][12:8];	// src/main/scala/rocket/Multiplier.scala:50:16
        count = _RANDOM[4'h4][19:13];	// src/main/scala/rocket/Multiplier.scala:50:16, :51:18
        neg_out = _RANDOM[4'h4][20];	// src/main/scala/rocket/Multiplier.scala:50:16, :54:20
        isHi = _RANDOM[4'h4][21];	// src/main/scala/rocket/Multiplier.scala:50:16, :55:17
        resHi = _RANDOM[4'h4][22];	// src/main/scala/rocket/Multiplier.scala:50:16, :56:18
        divisor = {_RANDOM[4'h4][31:23], _RANDOM[4'h5], _RANDOM[4'h6][23:0]};	// src/main/scala/rocket/Multiplier.scala:50:16, :57:20
        remainder =
          {_RANDOM[4'h6][31:24],
           _RANDOM[4'h7],
           _RANDOM[4'h8],
           _RANDOM[4'h9],
           _RANDOM[4'hA][25:0]};	// src/main/scala/rocket/Multiplier.scala:57:20, :58:22
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_req_ready = io_req_ready_0;
  assign io_resp_valid = io_resp_valid_0;
  assign io_resp_bits_data = io_resp_bits_data_0;
  assign io_resp_bits_tag = io_resp_bits_tag_0;
endmodule


// Generated by CIRCT firtool-1.66.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Queue_93(
  input         clock,
                reset,
  output        io_enq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
  input         io_enq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
  input  [2:0]  io_enq_bits_opcode,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
                io_enq_bits_param,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
                io_enq_bits_source,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
  input  [31:0] io_enq_bits_address,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
  input  [63:0] io_enq_bits_data,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
  input         io_deq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
  output        io_deq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
  output [2:0]  io_deq_bits_opcode,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
                io_deq_bits_param,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
                io_deq_bits_size,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
                io_deq_bits_source,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
  output [31:0] io_deq_bits_address,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
  output [63:0] io_deq_bits_data,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
  output        io_deq_bits_corrupt,	// src/main/scala/chisel3/util/Decoupled.scala:273:14
  output [3:0]  io_count	// src/main/scala/chisel3/util/Decoupled.scala:273:14
);

  wire [108:0] _ram_ext_R0_data;	// src/main/scala/chisel3/util/Decoupled.scala:274:95
  wire         io_enq_valid_0 = io_enq_valid;
  wire [2:0]   io_enq_bits_opcode_0 = io_enq_bits_opcode;
  wire [2:0]   io_enq_bits_param_0 = io_enq_bits_param;
  wire [2:0]   io_enq_bits_source_0 = io_enq_bits_source;
  wire [31:0]  io_enq_bits_address_0 = io_enq_bits_address;
  wire [63:0]  io_enq_bits_data_0 = io_enq_bits_data;
  wire         io_deq_ready_0 = io_deq_ready;
  wire         io_enq_bits_corrupt = 1'h0;
  wire [2:0]   io_enq_bits_size = 3'h6;	// src/main/scala/chisel3/util/Decoupled.scala:273:14, :274:95
  wire [2:0]   io_deq_bits_opcode_0 = _ram_ext_R0_data[2:0];	// src/main/scala/chisel3/util/Decoupled.scala:274:95
  wire [2:0]   io_deq_bits_param_0 = _ram_ext_R0_data[5:3];	// src/main/scala/chisel3/util/Decoupled.scala:274:95
  wire [2:0]   io_deq_bits_size_0 = _ram_ext_R0_data[8:6];	// src/main/scala/chisel3/util/Decoupled.scala:274:95
  wire [2:0]   io_deq_bits_source_0 = _ram_ext_R0_data[11:9];	// src/main/scala/chisel3/util/Decoupled.scala:274:95
  wire [31:0]  io_deq_bits_address_0 = _ram_ext_R0_data[43:12];	// src/main/scala/chisel3/util/Decoupled.scala:274:95
  wire [63:0]  io_deq_bits_data_0 = _ram_ext_R0_data[107:44];	// src/main/scala/chisel3/util/Decoupled.scala:274:95
  wire         io_deq_bits_corrupt_0 = _ram_ext_R0_data[108];	// src/main/scala/chisel3/util/Decoupled.scala:274:95
  reg  [3:0]   enq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [3:0]   deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg          maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:277:27
  wire         ptr_match = enq_ptr_value == deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:278:33
  wire         empty = ptr_match & ~maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:277:27, :278:33, :279:{25,28}
  wire         full = ptr_match & maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:277:27, :278:33, :280:24
  wire         io_enq_ready_0;
  wire         do_enq = io_enq_ready_0 & io_enq_valid_0;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, :281:27
  wire         io_deq_valid_0;
  wire         do_deq = io_deq_ready_0 & io_deq_valid_0;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, :282:27
  wire         wrap = enq_ptr_value == 4'hB;	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
  wire         wrap_1 = deq_ptr_value == 4'hB;	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
  assign io_deq_valid_0 = ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:279:25, :303:19
  assign io_enq_ready_0 = ~full;	// src/main/scala/chisel3/util/Decoupled.scala:280:24, :304:19
  wire [3:0]   ptr_diff = enq_ptr_value - deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:327:32
  wire [3:0]   io_count_0 =
    ptr_match
      ? (maybe_full ? 4'hC : 4'h0)
      : deq_ptr_value > enq_ptr_value ? ptr_diff - 4'h4 : ptr_diff;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:277:27, :278:33, :327:32, :332:20, :334:10, :335:{10,25,57}
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      deq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      maybe_full <= 1'h0;	// src/main/scala/chisel3/util/Decoupled.scala:277:27
    end
    else begin
      if (do_enq) begin	// src/main/scala/chisel3/util/Decoupled.scala:281:27
        if (wrap)	// src/main/scala/chisel3/util/Counter.scala:73:24
          enq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        else	// src/main/scala/chisel3/util/Counter.scala:73:24
          enq_ptr_value <= enq_ptr_value + 4'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      end
      if (do_deq) begin	// src/main/scala/chisel3/util/Decoupled.scala:282:27
        if (wrap_1)	// src/main/scala/chisel3/util/Counter.scala:73:24
          deq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        else	// src/main/scala/chisel3/util/Counter.scala:73:24
          deq_ptr_value <= deq_ptr_value + 4'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      end
      if (~(do_enq == do_deq))	// src/main/scala/chisel3/util/Decoupled.scala:277:27, :281:27, :282:27, :294:{15,27}, :295:16
        maybe_full <= do_enq;	// src/main/scala/chisel3/util/Decoupled.scala:277:27, :281:27
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM[0:0];
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][3:0];	// src/main/scala/chisel3/util/Counter.scala:61:40
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][7:4];	// src/main/scala/chisel3/util/Counter.scala:61:40
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][8];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:277:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_12x109 ram_ext (	// src/main/scala/chisel3/util/Decoupled.scala:274:95
    .R0_addr (deq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (enq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .W0_en   (do_enq),	// src/main/scala/chisel3/util/Decoupled.scala:281:27
    .W0_clk  (clock),
    .W0_data
      ({1'h0,
        io_enq_bits_data_0,
        io_enq_bits_address_0,
        io_enq_bits_source_0,
        3'h6,
        io_enq_bits_param_0,
        io_enq_bits_opcode_0})	// src/main/scala/chisel3/util/Decoupled.scala:273:14, :274:95
  );	// src/main/scala/chisel3/util/Decoupled.scala:274:95
  assign io_enq_ready = io_enq_ready_0;
  assign io_deq_valid = io_deq_valid_0;
  assign io_deq_bits_opcode = io_deq_bits_opcode_0;
  assign io_deq_bits_param = io_deq_bits_param_0;
  assign io_deq_bits_size = io_deq_bits_size_0;
  assign io_deq_bits_source = io_deq_bits_source_0;
  assign io_deq_bits_address = io_deq_bits_address_0;
  assign io_deq_bits_data = io_deq_bits_data_0;
  assign io_deq_bits_corrupt = io_deq_bits_corrupt_0;
  assign io_count = io_count_0;
endmodule


// Generated by CIRCT firtool-1.66.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module BroadcastFilter(
  output        io_request_ready,	// src/main/scala/tilelink/Broadcast.scala:356:14
  input         io_request_valid,	// src/main/scala/tilelink/Broadcast.scala:356:14
  input  [1:0]  io_request_bits_mshr,	// src/main/scala/tilelink/Broadcast.scala:356:14
  input  [31:0] io_request_bits_address,	// src/main/scala/tilelink/Broadcast.scala:356:14
  input  [7:0]  io_request_bits_allocOH,	// src/main/scala/tilelink/Broadcast.scala:356:14
  input         io_request_bits_needT,	// src/main/scala/tilelink/Broadcast.scala:356:14
                io_response_ready,	// src/main/scala/tilelink/Broadcast.scala:356:14
  output        io_response_valid,	// src/main/scala/tilelink/Broadcast.scala:356:14
  output [1:0]  io_response_bits_mshr,	// src/main/scala/tilelink/Broadcast.scala:356:14
  output [31:0] io_response_bits_address,	// src/main/scala/tilelink/Broadcast.scala:356:14
  output [7:0]  io_response_bits_allocOH,	// src/main/scala/tilelink/Broadcast.scala:356:14
  output        io_response_bits_needT,	// src/main/scala/tilelink/Broadcast.scala:356:14
  input         io_update_valid,	// src/main/scala/tilelink/Broadcast.scala:356:14
  input  [1:0]  io_update_bits_mshr,	// src/main/scala/tilelink/Broadcast.scala:356:14
  input         io_update_bits_gaveT,	// src/main/scala/tilelink/Broadcast.scala:356:14
  input  [7:0]  io_update_bits_cacheOH,	// src/main/scala/tilelink/Broadcast.scala:356:14
  input         io_release_valid,	// src/main/scala/tilelink/Broadcast.scala:356:14
  input  [31:0] io_release_bits_address,	// src/main/scala/tilelink/Broadcast.scala:356:14
  input         io_release_bits_keepB,	// src/main/scala/tilelink/Broadcast.scala:356:14
  input  [7:0]  io_release_bits_cacheOH	// src/main/scala/tilelink/Broadcast.scala:356:14
);

  wire        io_request_valid_0 = io_request_valid;
  wire [1:0]  io_request_bits_mshr_0 = io_request_bits_mshr;
  wire [31:0] io_request_bits_address_0 = io_request_bits_address;
  wire [7:0]  io_request_bits_allocOH_0 = io_request_bits_allocOH;
  wire        io_request_bits_needT_0 = io_request_bits_needT;
  wire        io_response_ready_0 = io_response_ready;
  wire        io_update_valid_0 = io_update_valid;
  wire [1:0]  io_update_bits_mshr_0 = io_update_bits_mshr;
  wire        io_update_bits_gaveT_0 = io_update_bits_gaveT;
  wire [7:0]  io_update_bits_cacheOH_0 = io_update_bits_cacheOH;
  wire        io_release_valid_0 = io_release_valid;
  wire [31:0] io_release_bits_address_0 = io_release_bits_address;
  wire        io_release_bits_keepB_0 = io_release_bits_keepB;
  wire [7:0]  io_release_bits_cacheOH_0 = io_release_bits_cacheOH;
  wire        io_int = 1'h0;
  wire        io_response_bits_gaveT = 1'h1;
  wire        io_update_ready = 1'h1;
  wire        io_release_ready = 1'h1;
  wire [7:0]  io_response_bits_cacheOH = 8'hFF;
  wire        io_response_valid_0 = io_request_valid_0;
  wire [1:0]  io_response_bits_mshr_0 = io_request_bits_mshr_0;
  wire [31:0] io_response_bits_address_0 = io_request_bits_address_0;
  wire [7:0]  io_response_bits_allocOH_0 = io_request_bits_allocOH_0;
  wire        io_response_bits_needT_0 = io_request_bits_needT_0;
  wire        io_request_ready_0 = io_response_ready_0;
  assign io_request_ready = io_request_ready_0;
  assign io_response_valid = io_response_valid_0;
  assign io_response_bits_mshr = io_response_bits_mshr_0;
  assign io_response_bits_address = io_response_bits_address_0;
  assign io_response_bits_allocOH = io_response_bits_allocOH_0;
  assign io_response_bits_needT = io_response_bits_needT_0;
endmodule


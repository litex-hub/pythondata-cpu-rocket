// Generated by CIRCT firtool-1.66.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module TLMonitor_46(
  input        clock,
               reset,
               io_in_a_ready,	// src/main/scala/tilelink/Monitor.scala:17:14
               io_in_a_valid,	// src/main/scala/tilelink/Monitor.scala:17:14
  input [2:0]  io_in_a_bits_opcode,	// src/main/scala/tilelink/Monitor.scala:17:14
  input [8:0]  io_in_a_bits_address,	// src/main/scala/tilelink/Monitor.scala:17:14
  input [31:0] io_in_a_bits_data,	// src/main/scala/tilelink/Monitor.scala:17:14
  input        io_in_d_ready,	// src/main/scala/tilelink/Monitor.scala:17:14
               io_in_d_valid,	// src/main/scala/tilelink/Monitor.scala:17:14
  input [2:0]  io_in_d_bits_opcode,	// src/main/scala/tilelink/Monitor.scala:17:14
  input [1:0]  io_in_d_bits_param,	// src/main/scala/tilelink/Monitor.scala:17:14
               io_in_d_bits_size,	// src/main/scala/tilelink/Monitor.scala:17:14
  input        io_in_d_bits_source,	// src/main/scala/tilelink/Monitor.scala:17:14
               io_in_d_bits_sink,	// src/main/scala/tilelink/Monitor.scala:17:14
               io_in_d_bits_denied,	// src/main/scala/tilelink/Monitor.scala:17:14
  input [31:0] io_in_d_bits_data,	// src/main/scala/tilelink/Monitor.scala:17:14
  input        io_in_d_bits_corrupt	// src/main/scala/tilelink/Monitor.scala:17:14
);

  wire [31:0] _plusarg_reader_1_out;	// src/main/scala/util/PlusArg.scala:80:11
  wire [31:0] _plusarg_reader_out;	// src/main/scala/util/PlusArg.scala:80:11
  wire        io_in_a_ready_0 = io_in_a_ready;
  wire        io_in_a_valid_0 = io_in_a_valid;
  wire [2:0]  io_in_a_bits_opcode_0 = io_in_a_bits_opcode;
  wire [8:0]  io_in_a_bits_address_0 = io_in_a_bits_address;
  wire [31:0] io_in_a_bits_data_0 = io_in_a_bits_data;
  wire        io_in_d_ready_0 = io_in_d_ready;
  wire        io_in_d_valid_0 = io_in_d_valid;
  wire [2:0]  io_in_d_bits_opcode_0 = io_in_d_bits_opcode;
  wire [1:0]  io_in_d_bits_param_0 = io_in_d_bits_param;
  wire [1:0]  io_in_d_bits_size_0 = io_in_d_bits_size;
  wire        io_in_d_bits_source_0 = io_in_d_bits_source;
  wire        io_in_d_bits_sink_0 = io_in_d_bits_sink;
  wire        io_in_d_bits_denied_0 = io_in_d_bits_denied;
  wire [31:0] io_in_d_bits_data_0 = io_in_d_bits_data;
  wire        io_in_d_bits_corrupt_0 = io_in_d_bits_corrupt;
  wire [1:0]  is_aligned_mask = 2'h3;	// src/main/scala/util/package.scala:235:46
  wire [1:0]  mask_lo = 2'h3;	// src/main/scala/util/Misc.scala:222:10
  wire [1:0]  mask_hi = 2'h3;	// src/main/scala/util/Misc.scala:222:10
  wire [1:0]  io_in_a_bits_size = 2'h2;
  wire [1:0]  mask_sizeOH = 2'h1;	// src/main/scala/util/Misc.scala:202:81
  wire [2:0]  responseMap_2 = 3'h1;	// src/main/scala/tilelink/Monitor.scala:640:42
  wire [2:0]  responseMap_3 = 3'h1;	// src/main/scala/tilelink/Monitor.scala:640:42
  wire [2:0]  responseMap_4 = 3'h1;	// src/main/scala/tilelink/Monitor.scala:640:42
  wire [2:0]  responseMapSecondOption_2 = 3'h1;	// src/main/scala/tilelink/Monitor.scala:641:42
  wire [2:0]  responseMapSecondOption_3 = 3'h1;	// src/main/scala/tilelink/Monitor.scala:641:42
  wire [2:0]  responseMapSecondOption_4 = 3'h1;	// src/main/scala/tilelink/Monitor.scala:641:42
  wire [2:0]  responseMap_6 = 3'h4;	// src/main/scala/tilelink/Monitor.scala:640:42
  wire [2:0]  responseMap_7 = 3'h4;	// src/main/scala/tilelink/Monitor.scala:640:42
  wire [2:0]  responseMapSecondOption_7 = 3'h4;	// src/main/scala/tilelink/Monitor.scala:641:42
  wire [2:0]  io_in_a_bits_param = 3'h0;
  wire [2:0]  responseMap_0 = 3'h0;	// src/main/scala/tilelink/Monitor.scala:640:42
  wire [2:0]  responseMap_1 = 3'h0;	// src/main/scala/tilelink/Monitor.scala:640:42
  wire [2:0]  responseMapSecondOption_0 = 3'h0;	// src/main/scala/tilelink/Monitor.scala:641:42
  wire [2:0]  responseMapSecondOption_1 = 3'h0;	// src/main/scala/tilelink/Monitor.scala:641:42
  wire [2:0]  c_sizes_set_interm = 3'h0;	// src/main/scala/tilelink/Monitor.scala:752:40
  wire        mask_acc = 1'h1;	// src/main/scala/util/Misc.scala:215:29
  wire        mask_acc_1 = 1'h1;	// src/main/scala/util/Misc.scala:215:29
  wire        mask_size_1 = 1'h1;	// src/main/scala/util/Misc.scala:209:26
  wire        mask_acc_2 = 1'h1;	// src/main/scala/util/Misc.scala:215:29
  wire        mask_acc_3 = 1'h1;	// src/main/scala/util/Misc.scala:215:29
  wire        mask_acc_4 = 1'h1;	// src/main/scala/util/Misc.scala:215:29
  wire        mask_acc_5 = 1'h1;	// src/main/scala/util/Misc.scala:215:29
  wire        a_first_last = 1'h1;	// src/main/scala/tilelink/Edges.scala:233:33
  wire        d_first_last = 1'h1;	// src/main/scala/tilelink/Edges.scala:233:33
  wire        a_first_last_1 = 1'h1;	// src/main/scala/tilelink/Edges.scala:233:33
  wire        d_first_last_1 = 1'h1;	// src/main/scala/tilelink/Edges.scala:233:33
  wire        c_first_counter1 = 1'h1;	// src/main/scala/tilelink/Edges.scala:231:28
  wire        c_first = 1'h1;	// src/main/scala/tilelink/Edges.scala:232:25
  wire        c_first_last = 1'h1;	// src/main/scala/tilelink/Edges.scala:233:33
  wire        d_first_last_2 = 1'h1;	// src/main/scala/tilelink/Edges.scala:233:33
  wire        io_in_a_bits_source = 1'h0;
  wire        io_in_a_bits_corrupt = 1'h0;
  wire        mask_sizeOH_shiftAmount = 1'h0;	// src/main/scala/chisel3/util/OneHot.scala:64:49
  wire        mask_size = 1'h0;	// src/main/scala/util/Misc.scala:209:26
  wire        sink_ok = 1'h0;	// src/main/scala/tilelink/Monitor.scala:306:31
  wire        a_first_beats1_decode = 1'h0;	// src/main/scala/tilelink/Edges.scala:221:59
  wire        a_first_beats1 = 1'h0;	// src/main/scala/tilelink/Edges.scala:222:14
  wire        a_first_count = 1'h0;	// src/main/scala/tilelink/Edges.scala:235:25
  wire        d_first_beats1_decode = 1'h0;	// src/main/scala/tilelink/Edges.scala:221:59
  wire        d_first_beats1 = 1'h0;	// src/main/scala/tilelink/Edges.scala:222:14
  wire        d_first_count = 1'h0;	// src/main/scala/tilelink/Edges.scala:235:25
  wire        a_first_beats1_decode_1 = 1'h0;	// src/main/scala/tilelink/Edges.scala:221:59
  wire        a_first_beats1_1 = 1'h0;	// src/main/scala/tilelink/Edges.scala:222:14
  wire        a_first_count_1 = 1'h0;	// src/main/scala/tilelink/Edges.scala:235:25
  wire        d_first_beats1_decode_1 = 1'h0;	// src/main/scala/tilelink/Edges.scala:221:59
  wire        d_first_beats1_1 = 1'h0;	// src/main/scala/tilelink/Edges.scala:222:14
  wire        d_first_count_1 = 1'h0;	// src/main/scala/tilelink/Edges.scala:235:25
  wire        c_first_beats1_decode = 1'h0;	// src/main/scala/tilelink/Edges.scala:221:59
  wire        c_first_beats1_opdata = 1'h0;	// src/main/scala/tilelink/Edges.scala:103:36
  wire        c_first_beats1 = 1'h0;	// src/main/scala/tilelink/Edges.scala:222:14
  wire        c_first_done = 1'h0;	// src/main/scala/tilelink/Edges.scala:234:22
  wire        c_first_count = 1'h0;	// src/main/scala/tilelink/Edges.scala:235:25
  wire        d_first_beats1_decode_2 = 1'h0;	// src/main/scala/tilelink/Edges.scala:221:59
  wire        d_first_beats1_2 = 1'h0;	// src/main/scala/tilelink/Edges.scala:222:14
  wire        d_first_count_2 = 1'h0;	// src/main/scala/tilelink/Edges.scala:235:25
  wire        c_set = 1'h0;	// src/main/scala/tilelink/Monitor.scala:735:34
  wire        c_set_wo_ready = 1'h0;	// src/main/scala/tilelink/Monitor.scala:736:34
  wire        c_probe_ack = 1'h0;	// src/main/scala/tilelink/Monitor.scala:769:71
  wire        same_cycle_resp_1 = 1'h0;	// src/main/scala/tilelink/Monitor.scala:792:88
  wire [3:0]  io_in_a_bits_mask = 4'hF;
  wire [3:0]  mask = 4'hF;	// src/main/scala/util/Misc.scala:222:10
  wire [3:0]  c_opcodes_set = 4'h0;	// src/main/scala/tilelink/Monitor.scala:737:34
  wire [3:0]  c_sizes_set = 4'h0;	// src/main/scala/tilelink/Monitor.scala:738:34
  wire [3:0]  c_opcodes_set_interm = 4'h0;	// src/main/scala/tilelink/Monitor.scala:751:40
  wire [2:0]  responseMapSecondOption_6 = 3'h5;	// src/main/scala/tilelink/Monitor.scala:641:42
  wire [2:0]  responseMap_5 = 3'h2;	// src/main/scala/tilelink/Monitor.scala:640:42
  wire [2:0]  responseMapSecondOption_5 = 3'h2;	// src/main/scala/tilelink/Monitor.scala:641:42
  wire        is_aligned = io_in_a_bits_address_0[1:0] == 2'h0;	// src/main/scala/tilelink/Edges.scala:22:{16,24}
  wire        mask_bit = io_in_a_bits_address_0[1];	// src/main/scala/util/Misc.scala:210:26
  wire        mask_eq_1 = mask_bit;	// src/main/scala/util/Misc.scala:210:26, :214:27
  wire        mask_nbit = ~mask_bit;	// src/main/scala/util/Misc.scala:210:26, :211:20
  wire        mask_eq = mask_nbit;	// src/main/scala/util/Misc.scala:211:20, :214:27
  wire        mask_bit_1 = io_in_a_bits_address_0[0];	// src/main/scala/util/Misc.scala:210:26
  wire        mask_nbit_1 = ~mask_bit_1;	// src/main/scala/util/Misc.scala:210:26, :211:20
  wire        mask_eq_2 = mask_eq & mask_nbit_1;	// src/main/scala/util/Misc.scala:211:20, :214:27
  wire        mask_eq_3 = mask_eq & mask_bit_1;	// src/main/scala/util/Misc.scala:210:26, :214:27
  wire        mask_eq_4 = mask_eq_1 & mask_nbit_1;	// src/main/scala/util/Misc.scala:211:20, :214:27
  wire        mask_eq_5 = mask_eq_1 & mask_bit_1;	// src/main/scala/util/Misc.scala:210:26, :214:27
  wire        _GEN = io_in_d_bits_opcode_0 == 3'h6;	// src/main/scala/tilelink/Monitor.scala:310:25
  wire        d_release_ack;	// src/main/scala/tilelink/Monitor.scala:670:46
  assign d_release_ack = _GEN;	// src/main/scala/tilelink/Monitor.scala:310:25, :670:46
  wire        d_release_ack_1;	// src/main/scala/tilelink/Monitor.scala:780:46
  assign d_release_ack_1 = _GEN;	// src/main/scala/tilelink/Monitor.scala:310:25, :780:46
  wire        _a_first_T_1 = io_in_a_ready_0 & io_in_a_valid_0;	// src/main/scala/chisel3/util/Decoupled.scala:52:35
  wire        a_first_done;	// src/main/scala/tilelink/Edges.scala:234:22
  assign a_first_done = _a_first_T_1;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/tilelink/Edges.scala:234:22
  wire        a_first_done_1;	// src/main/scala/tilelink/Edges.scala:234:22
  assign a_first_done_1 = _a_first_T_1;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/tilelink/Edges.scala:234:22
  wire        a_first_beats1_opdata = ~(io_in_a_bits_opcode_0[2]);	// src/main/scala/tilelink/Edges.scala:93:{28,37}
  reg         a_first_counter;	// src/main/scala/tilelink/Edges.scala:230:27
  wire        a_first_counter1 = a_first_counter - 1'h1;	// src/main/scala/tilelink/Edges.scala:230:27, :231:28
  wire        a_first = ~a_first_counter;	// src/main/scala/tilelink/Edges.scala:230:27, :232:25
  reg  [2:0]  opcode;	// src/main/scala/tilelink/Monitor.scala:384:22
  reg  [8:0]  address;	// src/main/scala/tilelink/Monitor.scala:388:22
  wire        _d_first_T_2 = io_in_d_ready_0 & io_in_d_valid_0;	// src/main/scala/chisel3/util/Decoupled.scala:52:35
  wire        d_first_done;	// src/main/scala/tilelink/Edges.scala:234:22
  assign d_first_done = _d_first_T_2;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/tilelink/Edges.scala:234:22
  wire        d_first_done_1;	// src/main/scala/tilelink/Edges.scala:234:22
  assign d_first_done_1 = _d_first_T_2;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/tilelink/Edges.scala:234:22
  wire        d_first_done_2;	// src/main/scala/tilelink/Edges.scala:234:22
  assign d_first_done_2 = _d_first_T_2;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/tilelink/Edges.scala:234:22
  wire        d_first_beats1_opdata = io_in_d_bits_opcode_0[0];	// src/main/scala/tilelink/Edges.scala:107:36
  wire        d_first_beats1_opdata_1 = io_in_d_bits_opcode_0[0];	// src/main/scala/tilelink/Edges.scala:107:36
  wire        d_first_beats1_opdata_2 = io_in_d_bits_opcode_0[0];	// src/main/scala/tilelink/Edges.scala:107:36
  reg         d_first_counter;	// src/main/scala/tilelink/Edges.scala:230:27
  wire        d_first_counter1 = d_first_counter - 1'h1;	// src/main/scala/tilelink/Edges.scala:230:27, :231:28
  wire        d_first = ~d_first_counter;	// src/main/scala/tilelink/Edges.scala:230:27, :232:25
  reg  [2:0]  opcode_1;	// src/main/scala/tilelink/Monitor.scala:535:22
  reg  [1:0]  param_1;	// src/main/scala/tilelink/Monitor.scala:536:22
  reg  [1:0]  size_1;	// src/main/scala/tilelink/Monitor.scala:537:22
  reg         source_1;	// src/main/scala/tilelink/Monitor.scala:538:22
  reg         sink;	// src/main/scala/tilelink/Monitor.scala:539:22
  reg         denied;	// src/main/scala/tilelink/Monitor.scala:540:22
  reg         inflight;	// src/main/scala/tilelink/Monitor.scala:611:27
  reg  [3:0]  inflight_opcodes;	// src/main/scala/tilelink/Monitor.scala:613:35
  reg  [3:0]  inflight_sizes;	// src/main/scala/tilelink/Monitor.scala:615:33
  wire        a_first_beats1_opdata_1 = ~(io_in_a_bits_opcode_0[2]);	// src/main/scala/tilelink/Edges.scala:93:{28,37}
  reg         a_first_counter_1;	// src/main/scala/tilelink/Edges.scala:230:27
  wire        a_first_counter1_1 = a_first_counter_1 - 1'h1;	// src/main/scala/tilelink/Edges.scala:230:27, :231:28
  wire        a_first_1 = ~a_first_counter_1;	// src/main/scala/tilelink/Edges.scala:230:27, :232:25
  reg         d_first_counter_1;	// src/main/scala/tilelink/Edges.scala:230:27
  wire        d_first_counter1_1 = d_first_counter_1 - 1'h1;	// src/main/scala/tilelink/Edges.scala:230:27, :231:28
  wire        d_first_1 = ~d_first_counter_1;	// src/main/scala/tilelink/Edges.scala:230:27, :232:25
  wire [3:0]  _GEN_0 = {1'h0, io_in_d_bits_source_0, 2'h0};	// src/main/scala/tilelink/Monitor.scala:634:69
  wire [3:0]  _a_opcode_lookup_T_1 = inflight_opcodes >> _GEN_0;	// src/main/scala/tilelink/Monitor.scala:613:35, :634:{44,69}
  wire [3:0]  a_opcode_lookup = {1'h0, _a_opcode_lookup_T_1[3:1]};	// src/main/scala/tilelink/Monitor.scala:632:35, :634:{21,44,152}
  wire [3:0]  _a_size_lookup_T_1 = inflight_sizes >> _GEN_0;	// src/main/scala/tilelink/Monitor.scala:615:33, :634:69, :638:40
  wire [3:0]  a_size_lookup = {1'h0, _a_size_lookup_T_1[3:1]};	// src/main/scala/tilelink/Monitor.scala:636:33, :638:{19,40,144}
  wire        a_set_wo_ready = io_in_a_valid_0 & a_first_1;	// src/main/scala/tilelink/Edges.scala:232:25, src/main/scala/tilelink/Monitor.scala:624:34, :648:26
  wire        a_set = _a_first_T_1 & a_first_1;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/tilelink/Edges.scala:232:25, src/main/scala/tilelink/Monitor.scala:623:34, :652:25
  wire [3:0]  a_opcodes_set_interm = a_set ? {io_in_a_bits_opcode_0, 1'h1} : 4'h0;	// src/main/scala/tilelink/Monitor.scala:623:34, :643:40, :652:70, :654:{28,61}
  wire [2:0]  a_sizes_set_interm = a_set ? 3'h5 : 3'h0;	// src/main/scala/tilelink/Monitor.scala:623:34, :645:38, :652:70, :655:28
  wire [3:0]  a_opcodes_set = a_set ? a_opcodes_set_interm : 4'h0;	// src/main/scala/tilelink/Monitor.scala:623:34, :627:33, :643:40, :652:70, :656:28
  wire [3:0]  a_sizes_set = a_set ? {1'h0, a_sizes_set_interm} : 4'h0;	// src/main/scala/tilelink/Monitor.scala:623:34, :629:31, :645:38, :652:70, :657:28
  wire        _GEN_1 = io_in_d_valid_0 & d_first_1;	// src/main/scala/tilelink/Edges.scala:232:25, src/main/scala/tilelink/Monitor.scala:671:26
  wire        _GEN_2 = _GEN_1 & ~d_release_ack;	// src/main/scala/tilelink/Monitor.scala:670:46, :671:{26,71,74}
  wire        d_clr_wo_ready = _GEN_2 & ~io_in_d_bits_source_0;	// src/main/scala/tilelink/Monitor.scala:662:34, :671:{71,90}, :672:22
  wire        _GEN_3 = _d_first_T_2 & d_first_1 & ~d_release_ack;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/tilelink/Edges.scala:232:25, src/main/scala/tilelink/Monitor.scala:670:46, :671:74, :675:{25,70}
  wire        d_clr = _GEN_3 & ~io_in_d_bits_source_0;	// src/main/scala/tilelink/Monitor.scala:661:34, :672:22, :675:{25,70,89}, :676:21
  wire [30:0] _GEN_4 = {28'h0, io_in_d_bits_source_0, 2'h0};	// src/main/scala/tilelink/Monitor.scala:677:76
  wire [30:0] _d_opcodes_clr_T_5 = 31'hF << _GEN_4;	// src/main/scala/tilelink/Monitor.scala:677:76
  wire [3:0]  d_opcodes_clr = _GEN_3 ? _d_opcodes_clr_T_5[3:0] : 4'h0;	// src/main/scala/tilelink/Monitor.scala:665:33, :675:{25,70,89}, :677:{21,76}
  wire [30:0] _d_sizes_clr_T_5 = 31'hF << _GEN_4;	// src/main/scala/tilelink/Monitor.scala:677:76, :678:74
  wire [3:0]  d_sizes_clr = _GEN_3 ? _d_sizes_clr_T_5[3:0] : 4'h0;	// src/main/scala/tilelink/Monitor.scala:667:31, :675:{25,70,89}, :678:{21,74}
  wire        same_cycle_resp = a_set_wo_ready & ~io_in_d_bits_source_0;	// src/main/scala/tilelink/Monitor.scala:624:34, :681:{88,113}
  reg  [31:0] watchdog;	// src/main/scala/tilelink/Monitor.scala:706:27
  reg         inflight_1;	// src/main/scala/tilelink/Monitor.scala:723:35
  reg  [3:0]  inflight_opcodes_1;	// src/main/scala/tilelink/Monitor.scala:724:35
  reg  [3:0]  inflight_sizes_1;	// src/main/scala/tilelink/Monitor.scala:725:35
  reg         d_first_counter_2;	// src/main/scala/tilelink/Edges.scala:230:27
  wire        d_first_counter1_2 = d_first_counter_2 - 1'h1;	// src/main/scala/tilelink/Edges.scala:230:27, :231:28
  wire        d_first_2 = ~d_first_counter_2;	// src/main/scala/tilelink/Edges.scala:230:27, :232:25
  wire [3:0]  _c_opcode_lookup_T_1 = inflight_opcodes_1 >> _GEN_0;	// src/main/scala/tilelink/Monitor.scala:634:69, :724:35, :746:44
  wire [3:0]  c_opcode_lookup = {1'h0, _c_opcode_lookup_T_1[3:1]};	// src/main/scala/tilelink/Monitor.scala:744:35, :746:{21,44,152}
  wire [3:0]  _c_size_lookup_T_1 = inflight_sizes_1 >> _GEN_0;	// src/main/scala/tilelink/Monitor.scala:634:69, :725:35, :747:42
  wire [3:0]  c_size_lookup = {1'h0, _c_size_lookup_T_1[3:1]};	// src/main/scala/tilelink/Monitor.scala:745:35, :747:{21,42,146}
  wire        _GEN_5 = io_in_d_valid_0 & d_first_2 & d_release_ack_1;	// src/main/scala/tilelink/Edges.scala:232:25, src/main/scala/tilelink/Monitor.scala:780:46, :781:{26,71}
  wire        d_clr_wo_ready_1 = _GEN_5 & ~io_in_d_bits_source_0;	// src/main/scala/tilelink/Monitor.scala:672:22, :772:34, :781:{26,71,89}, :782:22
  wire        _GEN_6 = _d_first_T_2 & d_first_2 & d_release_ack_1;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/tilelink/Edges.scala:232:25, src/main/scala/tilelink/Monitor.scala:780:46, :785:{25,70}
  wire        d_clr_1 = _GEN_6 & ~io_in_d_bits_source_0;	// src/main/scala/tilelink/Monitor.scala:672:22, :771:34, :785:{25,70,88}, :786:21
  wire [30:0] _d_opcodes_clr_T_11 = 31'hF << _GEN_4;	// src/main/scala/tilelink/Monitor.scala:677:76, :787:76
  wire [3:0]  d_opcodes_clr_1 = _GEN_6 ? _d_opcodes_clr_T_11[3:0] : 4'h0;	// src/main/scala/tilelink/Monitor.scala:773:34, :785:{25,70,88}, :787:{21,76}
  wire [30:0] _d_sizes_clr_T_11 = 31'hF << _GEN_4;	// src/main/scala/tilelink/Monitor.scala:677:76, :788:74
  wire [3:0]  d_sizes_clr_1 = _GEN_6 ? _d_sizes_clr_T_11[3:0] : 4'h0;	// src/main/scala/tilelink/Monitor.scala:774:34, :785:{25,70,88}, :788:{21,74}
  reg  [31:0] watchdog_1;	// src/main/scala/tilelink/Monitor.scala:815:27
  `ifndef SYNTHESIS	// src/main/scala/tilelink/Monitor.scala:42:11
    always @(posedge clock) begin	// src/main/scala/tilelink/Monitor.scala:42:11
      automatic logic [7:0][2:0] _GEN_7 =
        '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic [7:0][2:0] _GEN_8 =
        '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
      automatic logic            _GEN_9 =
        io_in_a_valid_0 & io_in_a_bits_opcode_0 == 3'h6 & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :81:{25,54}
      automatic logic            _GEN_10 =
        io_in_a_valid_0 & (&io_in_a_bits_opcode_0) & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :92:{25,53}
      automatic logic [4:0]      _GEN_11 = io_in_a_bits_address_0[6:2] ^ 5'h11;	// src/main/scala/diplomacy/Parameters.scala:137:31
      automatic logic            _GEN_12 =
        io_in_a_bits_address_0[8:6] == 3'h0
        | {io_in_a_bits_address_0[8:7], _GEN_11[4:2], _GEN_11[0]} == 6'h0
        | {io_in_a_bits_address_0[8:7], io_in_a_bits_address_0[6:3] ^ 4'hB} == 6'h0
        | {io_in_a_bits_address_0[8:7], ~(io_in_a_bits_address_0[6:5])} == 4'h0
        | {io_in_a_bits_address_0[8], ~(io_in_a_bits_address_0[7])} == 2'h0
        | io_in_a_bits_address_0[8];	// src/main/scala/diplomacy/Parameters.scala:137:{31,41,46,59}, src/main/scala/tilelink/Parameters.scala:672:42
      automatic logic            _GEN_13 =
        io_in_a_valid_0 & io_in_a_bits_opcode_0 == 3'h4 & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :104:{25,45}
      automatic logic            _GEN_14 =
        io_in_a_valid_0 & io_in_a_bits_opcode_0 == 3'h0 & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :114:{25,53}
      automatic logic            _GEN_15 =
        io_in_a_valid_0 & io_in_a_bits_opcode_0 == 3'h1 & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :122:{25,56}
      automatic logic            _GEN_16 =
        io_in_a_valid_0 & io_in_a_bits_opcode_0 == 3'h2 & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :130:{25,56}
      automatic logic            _GEN_17 =
        io_in_a_valid_0 & io_in_a_bits_opcode_0 == 3'h3 & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :138:{25,53}
      automatic logic            _GEN_18 =
        io_in_a_valid_0 & io_in_a_bits_opcode_0 == 3'h5 & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :146:{25,46}
      automatic logic            _GEN_19 = io_in_d_valid_0 & _GEN & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :49:11, :310:{25,52}
      automatic logic            _GEN_20 =
        io_in_d_valid_0 & io_in_d_bits_opcode_0 == 3'h4 & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :49:11, :318:{25,47}
      automatic logic            _GEN_21 = io_in_d_bits_param_0 == 2'h2;	// src/main/scala/tilelink/Monitor.scala:323:28
      automatic logic            _GEN_22 =
        io_in_d_valid_0 & io_in_d_bits_opcode_0 == 3'h5 & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :49:11, :328:{25,51}
      automatic logic            _GEN_23 =
        ~io_in_d_bits_denied_0 | io_in_d_bits_corrupt_0;	// src/main/scala/tilelink/Monitor.scala:334:{15,30}
      automatic logic            _GEN_24 =
        io_in_d_valid_0 & io_in_d_bits_opcode_0 == 3'h0 & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :49:11, :338:{25,51}
      automatic logic            _GEN_25 =
        io_in_d_valid_0 & io_in_d_bits_opcode_0 == 3'h1 & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :49:11, :346:{25,55}
      automatic logic            _GEN_26 =
        io_in_d_valid_0 & io_in_d_bits_opcode_0 == 3'h2 & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :49:11, :354:{25,49}
      automatic logic            _GEN_27 = io_in_a_valid_0 & ~a_first & ~reset;	// src/main/scala/tilelink/Edges.scala:232:25, src/main/scala/tilelink/Monitor.scala:42:11, :389:{19,22}
      automatic logic            _GEN_28 = io_in_d_valid_0 & ~d_first & ~reset;	// src/main/scala/tilelink/Edges.scala:232:25, src/main/scala/tilelink/Monitor.scala:42:11, :49:11, :541:{19,22}
      automatic logic            _GEN_29 = _GEN_2 & same_cycle_resp & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :49:11, :671:71, :681:88, :684:30
      automatic logic            _GEN_30 = _GEN_2 & ~same_cycle_resp & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :49:11, :671:71, :681:88, :684:30
      automatic logic [3:0]      _GEN_31 = {2'h0, io_in_d_bits_size_0};	// src/main/scala/tilelink/Monitor.scala:691:36
      automatic logic            _GEN_32 = _GEN_5 & ~reset;	// src/main/scala/tilelink/Monitor.scala:42:11, :49:11, :781:{26,71}
      if (_GEN_9) begin	// src/main/scala/tilelink/Monitor.scala:42:11, :81:54
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_9 & ~is_aligned) begin	// src/main/scala/tilelink/Edges.scala:22:24, src/main/scala/tilelink/Monitor.scala:42:11, :81:54
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_10) begin	// src/main/scala/tilelink/Monitor.scala:42:11, :92:53
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_10 & ~is_aligned) begin	// src/main/scala/tilelink/Edges.scala:22:24, src/main/scala/tilelink/Monitor.scala:42:11, :92:53
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_10) begin	// src/main/scala/tilelink/Monitor.scala:42:11, :92:53
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_13 & ~_GEN_12) begin	// src/main/scala/tilelink/Monitor.scala:42:11, :104:45, src/main/scala/tilelink/Parameters.scala:672:42
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_13 & ~is_aligned) begin	// src/main/scala/tilelink/Edges.scala:22:24, src/main/scala/tilelink/Monitor.scala:42:11, :104:45
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_14 & ~_GEN_12) begin	// src/main/scala/tilelink/Monitor.scala:42:11, :114:53, src/main/scala/tilelink/Parameters.scala:672:42
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_14 & ~is_aligned) begin	// src/main/scala/tilelink/Edges.scala:22:24, src/main/scala/tilelink/Monitor.scala:42:11, :114:53
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_15) begin	// src/main/scala/tilelink/Monitor.scala:42:11, :122:56
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_15 & ~is_aligned) begin	// src/main/scala/tilelink/Edges.scala:22:24, src/main/scala/tilelink/Monitor.scala:42:11, :122:56
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_16) begin	// src/main/scala/tilelink/Monitor.scala:42:11, :130:56
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_16 & ~is_aligned) begin	// src/main/scala/tilelink/Edges.scala:22:24, src/main/scala/tilelink/Monitor.scala:42:11, :130:56
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_17) begin	// src/main/scala/tilelink/Monitor.scala:42:11, :138:53
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_17 & ~is_aligned) begin	// src/main/scala/tilelink/Edges.scala:22:24, src/main/scala/tilelink/Monitor.scala:42:11, :138:53
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_18) begin	// src/main/scala/tilelink/Monitor.scala:42:11, :146:46
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_18 & ~is_aligned) begin	// src/main/scala/tilelink/Edges.scala:22:24, src/main/scala/tilelink/Monitor.scala:42:11, :146:46
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (io_in_d_valid_0 & ~reset & (&io_in_d_bits_opcode_0)) begin	// src/main/scala/tilelink/Bundles.scala:45:24, src/main/scala/tilelink/Monitor.scala:42:11, :49:11
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_19 & io_in_d_bits_source_0) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :310:52
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_19 & ~(io_in_d_bits_size_0[1])) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :310:52, :312:27
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_19 & (|io_in_d_bits_param_0)) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :310:52, :313:28
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_19 & io_in_d_bits_corrupt_0) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :310:52
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_19 & io_in_d_bits_denied_0) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :310:52
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_20 & io_in_d_bits_source_0) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :318:47
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_20) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :318:47
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_20 & ~(io_in_d_bits_size_0[1])) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :312:27, :318:47
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_20 & (&io_in_d_bits_param_0)) begin	// src/main/scala/tilelink/Bundles.scala:105:26, src/main/scala/tilelink/Monitor.scala:49:11, :318:47
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_20 & _GEN_21) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :318:47, :323:28
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_20 & io_in_d_bits_corrupt_0) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :318:47
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_22 & io_in_d_bits_source_0) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :328:51
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_22) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :328:51
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_22 & ~(io_in_d_bits_size_0[1])) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :312:27, :328:51
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_22 & (&io_in_d_bits_param_0)) begin	// src/main/scala/tilelink/Bundles.scala:105:26, src/main/scala/tilelink/Monitor.scala:49:11, :328:51
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_22 & _GEN_21) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :323:28, :328:51
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_22 & ~_GEN_23) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :328:51, :334:30
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_24 & io_in_d_bits_source_0) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :338:51
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_24 & (|io_in_d_bits_param_0)) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :313:28, :338:51
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_24 & io_in_d_bits_corrupt_0) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :338:51
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_25 & io_in_d_bits_source_0) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :346:55
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_25 & (|io_in_d_bits_param_0)) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :313:28, :346:55
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_25 & ~_GEN_23) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :334:30, :346:55
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_26 & io_in_d_bits_source_0) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :354:49
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_26 & (|io_in_d_bits_param_0)) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :313:28, :354:49
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_26 & io_in_d_bits_corrupt_0) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :354:49
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_27 & io_in_a_bits_opcode_0 != opcode) begin	// src/main/scala/tilelink/Monitor.scala:42:11, :384:22, :389:19, :390:32
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_27 & io_in_a_bits_address_0 != address) begin	// src/main/scala/tilelink/Monitor.scala:42:11, :388:22, :389:19, :394:32
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_28 & io_in_d_bits_opcode_0 != opcode_1) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :535:22, :541:19, :542:29
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_28 & io_in_d_bits_param_0 != param_1) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :536:22, :541:19, :543:29
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_28 & io_in_d_bits_size_0 != size_1) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :537:22, :541:19, :544:29
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_28 & io_in_d_bits_source_0 != source_1) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :538:22, :541:19, :545:29
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_28 & io_in_d_bits_sink_0 != sink) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :539:22, :541:19, :546:29
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_28 & io_in_d_bits_denied_0 != denied) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :540:22, :541:19, :547:29
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (a_set & ~reset & inflight) begin	// src/main/scala/tilelink/Monitor.scala:42:11, :611:27, :623:34
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_2 & ~reset & ~(inflight >> io_in_d_bits_source_0 | same_cycle_resp)) begin	// src/main/scala/tilelink/Monitor.scala:42:11, :49:11, :611:27, :671:71, :681:88, :682:{25,49}
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_29
          & ~(io_in_d_bits_opcode_0 == _GEN_8[io_in_a_bits_opcode_0]
              | io_in_d_bits_opcode_0 == _GEN_7[io_in_a_bits_opcode_0])) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :684:30, :685:{38,77}, :686:39
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_29 & io_in_d_bits_size_0 != 2'h2) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :684:30, :687:36
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_30
          & ~(io_in_d_bits_opcode_0 == _GEN_8[a_opcode_lookup[2:0]]
              | io_in_d_bits_opcode_0 == _GEN_7[a_opcode_lookup[2:0]])) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :632:35, :684:30, :689:{38,72}, :690:38
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_30 & _GEN_31 != a_size_lookup) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :636:33, :684:30, :691:36
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_1 & a_first_1 & io_in_a_valid_0 & ~io_in_d_bits_source_0 & ~d_release_ack
          & ~reset & ~(~io_in_d_ready_0 | io_in_a_ready_0)) begin	// src/main/scala/tilelink/Edges.scala:232:25, src/main/scala/tilelink/Monitor.scala:42:11, :49:11, :670:46, :671:{26,74}, :694:{36,47,65,90,116}, :695:{15,32}
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (~reset
          & ~(~inflight | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin	// src/main/scala/tilelink/Monitor.scala:42:11, :611:27, :706:27, :709:{16,30,39,47,59}, src/main/scala/util/PlusArg.scala:80:11
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
      if (_GEN_32 & ~(inflight_1 >> io_in_d_bits_source_0)) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :723:35, :793:25
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (_GEN_32 & _GEN_31 != c_size_lookup) begin	// src/main/scala/tilelink/Monitor.scala:49:11, :691:36, :745:35, :797:36
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:49:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:49:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:49:11
      end
      if (~reset
          & ~(~inflight_1 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin	// src/main/scala/tilelink/Monitor.scala:42:11, :723:35, :815:27, :818:{16,30,39,47,59}, src/main/scala/util/PlusArg.scala:80:11
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/devices/tilelink/BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n");	// src/main/scala/tilelink/Monitor.scala:42:11
        if (`STOP_COND_)	// src/main/scala/tilelink/Monitor.scala:42:11
          $fatal;	// src/main/scala/tilelink/Monitor.scala:42:11
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 1'h0;	// src/main/scala/tilelink/Edges.scala:230:27
      d_first_counter <= 1'h0;	// src/main/scala/tilelink/Edges.scala:230:27
      inflight <= 1'h0;	// src/main/scala/tilelink/Monitor.scala:611:27
      inflight_opcodes <= 4'h0;	// src/main/scala/tilelink/Monitor.scala:613:35
      inflight_sizes <= 4'h0;	// src/main/scala/tilelink/Monitor.scala:615:33
      a_first_counter_1 <= 1'h0;	// src/main/scala/tilelink/Edges.scala:230:27
      d_first_counter_1 <= 1'h0;	// src/main/scala/tilelink/Edges.scala:230:27
      watchdog <= 32'h0;	// src/main/scala/tilelink/Monitor.scala:706:27
      inflight_1 <= 1'h0;	// src/main/scala/tilelink/Monitor.scala:723:35
      inflight_opcodes_1 <= 4'h0;	// src/main/scala/tilelink/Monitor.scala:724:35
      inflight_sizes_1 <= 4'h0;	// src/main/scala/tilelink/Monitor.scala:725:35
      d_first_counter_2 <= 1'h0;	// src/main/scala/tilelink/Edges.scala:230:27
      watchdog_1 <= 32'h0;	// src/main/scala/tilelink/Monitor.scala:815:27
    end
    else begin
      if (_a_first_T_1) begin	// src/main/scala/chisel3/util/Decoupled.scala:52:35
        a_first_counter <= ~a_first & a_first_counter1;	// src/main/scala/tilelink/Edges.scala:230:27, :231:28, :232:25, :237:21
        a_first_counter_1 <= ~a_first_1 & a_first_counter1_1;	// src/main/scala/tilelink/Edges.scala:230:27, :231:28, :232:25, :237:21
      end
      if (_d_first_T_2) begin	// src/main/scala/chisel3/util/Decoupled.scala:52:35
        d_first_counter <= ~d_first & d_first_counter1;	// src/main/scala/tilelink/Edges.scala:230:27, :231:28, :232:25, :237:21
        d_first_counter_1 <= ~d_first_1 & d_first_counter1_1;	// src/main/scala/tilelink/Edges.scala:230:27, :231:28, :232:25, :237:21
        d_first_counter_2 <= ~d_first_2 & d_first_counter1_2;	// src/main/scala/tilelink/Edges.scala:230:27, :231:28, :232:25, :237:21
        watchdog_1 <= 32'h0;	// src/main/scala/tilelink/Monitor.scala:815:27
      end
      else	// src/main/scala/chisel3/util/Decoupled.scala:52:35
        watchdog_1 <= watchdog_1 + 32'h1;	// src/main/scala/tilelink/Monitor.scala:815:27, :820:26
      inflight <= (inflight | a_set) & ~d_clr;	// src/main/scala/tilelink/Monitor.scala:611:27, :623:34, :661:34, :702:{27,36,38}
      inflight_opcodes <= (inflight_opcodes | a_opcodes_set) & ~d_opcodes_clr;	// src/main/scala/tilelink/Monitor.scala:613:35, :627:33, :665:33, :703:{43,60,62}
      inflight_sizes <= (inflight_sizes | a_sizes_set) & ~d_sizes_clr;	// src/main/scala/tilelink/Monitor.scala:615:33, :629:31, :667:31, :704:{39,54,56}
      if (_a_first_T_1 | _d_first_T_2)	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/tilelink/Monitor.scala:712:25
        watchdog <= 32'h0;	// src/main/scala/tilelink/Monitor.scala:706:27
      else	// src/main/scala/tilelink/Monitor.scala:712:25
        watchdog <= watchdog + 32'h1;	// src/main/scala/tilelink/Monitor.scala:706:27, :711:26
      inflight_1 <= inflight_1 & ~d_clr_1;	// src/main/scala/tilelink/Monitor.scala:723:35, :771:34, :811:{44,46}
      inflight_opcodes_1 <= inflight_opcodes_1 & ~d_opcodes_clr_1;	// src/main/scala/tilelink/Monitor.scala:724:35, :773:34, :812:{60,62}
      inflight_sizes_1 <= inflight_sizes_1 & ~d_sizes_clr_1;	// src/main/scala/tilelink/Monitor.scala:725:35, :774:34, :813:{56,58}
    end
    if (_a_first_T_1 & a_first) begin	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/tilelink/Edges.scala:232:25, src/main/scala/tilelink/Monitor.scala:396:18
      opcode <= io_in_a_bits_opcode_0;	// src/main/scala/tilelink/Monitor.scala:384:22
      address <= io_in_a_bits_address_0;	// src/main/scala/tilelink/Monitor.scala:388:22
    end
    if (_d_first_T_2 & d_first) begin	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/tilelink/Edges.scala:232:25, src/main/scala/tilelink/Monitor.scala:549:18
      opcode_1 <= io_in_d_bits_opcode_0;	// src/main/scala/tilelink/Monitor.scala:535:22
      param_1 <= io_in_d_bits_param_0;	// src/main/scala/tilelink/Monitor.scala:536:22
      size_1 <= io_in_d_bits_size_0;	// src/main/scala/tilelink/Monitor.scala:537:22
      source_1 <= io_in_d_bits_source_0;	// src/main/scala/tilelink/Monitor.scala:538:22
      sink <= io_in_d_bits_sink_0;	// src/main/scala/tilelink/Monitor.scala:539:22
      denied <= io_in_d_bits_denied_0;	// src/main/scala/tilelink/Monitor.scala:540:22
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM[0:3];
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;
        end
        a_first_counter = _RANDOM[2'h0][0];	// src/main/scala/tilelink/Edges.scala:230:27
        opcode = _RANDOM[2'h0][3:1];	// src/main/scala/tilelink/Edges.scala:230:27, src/main/scala/tilelink/Monitor.scala:384:22
        address = _RANDOM[2'h0][18:10];	// src/main/scala/tilelink/Edges.scala:230:27, src/main/scala/tilelink/Monitor.scala:388:22
        d_first_counter = _RANDOM[2'h0][19];	// src/main/scala/tilelink/Edges.scala:230:27
        opcode_1 = _RANDOM[2'h0][22:20];	// src/main/scala/tilelink/Edges.scala:230:27, src/main/scala/tilelink/Monitor.scala:535:22
        param_1 = _RANDOM[2'h0][24:23];	// src/main/scala/tilelink/Edges.scala:230:27, src/main/scala/tilelink/Monitor.scala:536:22
        size_1 = _RANDOM[2'h0][26:25];	// src/main/scala/tilelink/Edges.scala:230:27, src/main/scala/tilelink/Monitor.scala:537:22
        source_1 = _RANDOM[2'h0][27];	// src/main/scala/tilelink/Edges.scala:230:27, src/main/scala/tilelink/Monitor.scala:538:22
        sink = _RANDOM[2'h0][28];	// src/main/scala/tilelink/Edges.scala:230:27, src/main/scala/tilelink/Monitor.scala:539:22
        denied = _RANDOM[2'h0][29];	// src/main/scala/tilelink/Edges.scala:230:27, src/main/scala/tilelink/Monitor.scala:540:22
        inflight = _RANDOM[2'h0][30];	// src/main/scala/tilelink/Edges.scala:230:27, src/main/scala/tilelink/Monitor.scala:611:27
        inflight_opcodes = {_RANDOM[2'h0][31], _RANDOM[2'h1][2:0]};	// src/main/scala/tilelink/Edges.scala:230:27, src/main/scala/tilelink/Monitor.scala:613:35
        inflight_sizes = _RANDOM[2'h1][6:3];	// src/main/scala/tilelink/Monitor.scala:613:35, :615:33
        a_first_counter_1 = _RANDOM[2'h1][7];	// src/main/scala/tilelink/Edges.scala:230:27, src/main/scala/tilelink/Monitor.scala:613:35
        d_first_counter_1 = _RANDOM[2'h1][8];	// src/main/scala/tilelink/Edges.scala:230:27, src/main/scala/tilelink/Monitor.scala:613:35
        watchdog = {_RANDOM[2'h1][31:9], _RANDOM[2'h2][8:0]};	// src/main/scala/tilelink/Monitor.scala:613:35, :706:27
        inflight_1 = _RANDOM[2'h2][9];	// src/main/scala/tilelink/Monitor.scala:706:27, :723:35
        inflight_opcodes_1 = _RANDOM[2'h2][13:10];	// src/main/scala/tilelink/Monitor.scala:706:27, :724:35
        inflight_sizes_1 = _RANDOM[2'h2][17:14];	// src/main/scala/tilelink/Monitor.scala:706:27, :725:35
        d_first_counter_2 = _RANDOM[2'h2][19];	// src/main/scala/tilelink/Edges.scala:230:27, src/main/scala/tilelink/Monitor.scala:706:27
        watchdog_1 = {_RANDOM[2'h2][31:20], _RANDOM[2'h3][19:0]};	// src/main/scala/tilelink/Monitor.scala:706:27, :815:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (	// src/main/scala/util/PlusArg.scala:80:11
    .out (_plusarg_reader_out)
  );	// src/main/scala/util/PlusArg.scala:80:11
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (	// src/main/scala/util/PlusArg.scala:80:11
    .out (_plusarg_reader_1_out)
  );	// src/main/scala/util/PlusArg.scala:80:11
endmodule


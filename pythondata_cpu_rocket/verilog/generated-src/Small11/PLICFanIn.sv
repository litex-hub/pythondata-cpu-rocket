// Generated by CIRCT firtool-1.66.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module PLICFanIn(
  input  [2:0] io_prio_0,	// src/main/scala/devices/tilelink/Plic.scala:334:14
               io_prio_1,	// src/main/scala/devices/tilelink/Plic.scala:334:14
               io_prio_2,	// src/main/scala/devices/tilelink/Plic.scala:334:14
               io_prio_3,	// src/main/scala/devices/tilelink/Plic.scala:334:14
               io_prio_4,	// src/main/scala/devices/tilelink/Plic.scala:334:14
               io_prio_5,	// src/main/scala/devices/tilelink/Plic.scala:334:14
               io_prio_6,	// src/main/scala/devices/tilelink/Plic.scala:334:14
               io_prio_7,	// src/main/scala/devices/tilelink/Plic.scala:334:14
  input  [7:0] io_ip,	// src/main/scala/devices/tilelink/Plic.scala:334:14
  output [3:0] io_dev,	// src/main/scala/devices/tilelink/Plic.scala:334:14
  output [2:0] io_max	// src/main/scala/devices/tilelink/Plic.scala:334:14
);

  wire [2:0] io_prio_0_0 = io_prio_0;
  wire [2:0] io_prio_1_0 = io_prio_1;
  wire [2:0] io_prio_2_0 = io_prio_2;
  wire [2:0] io_prio_3_0 = io_prio_3;
  wire [2:0] io_prio_4_0 = io_prio_4;
  wire [2:0] io_prio_5_0 = io_prio_5;
  wire [2:0] io_prio_6_0 = io_prio_6;
  wire [2:0] io_prio_7_0 = io_prio_7;
  wire [7:0] io_ip_0 = io_ip;
  wire [3:0] effectivePriority_0 = 4'h8;	// src/main/scala/devices/tilelink/Plic.scala:350:32
  wire [3:0] maxDev;	// src/main/scala/util/Misc.scala:35:36
  wire [3:0] effectivePriority_1 = {io_ip_0[0], io_prio_0_0};	// src/main/scala/devices/tilelink/Plic.scala:350:{55,100}
  wire [3:0] effectivePriority_2 = {io_ip_0[1], io_prio_1_0};	// src/main/scala/devices/tilelink/Plic.scala:350:{55,100}
  wire [3:0] effectivePriority_3 = {io_ip_0[2], io_prio_2_0};	// src/main/scala/devices/tilelink/Plic.scala:350:{55,100}
  wire [3:0] effectivePriority_4 = {io_ip_0[3], io_prio_3_0};	// src/main/scala/devices/tilelink/Plic.scala:350:{55,100}
  wire [3:0] effectivePriority_5 = {io_ip_0[4], io_prio_4_0};	// src/main/scala/devices/tilelink/Plic.scala:350:{55,100}
  wire [3:0] effectivePriority_6 = {io_ip_0[5], io_prio_5_0};	// src/main/scala/devices/tilelink/Plic.scala:350:{55,100}
  wire [3:0] effectivePriority_7 = {io_ip_0[6], io_prio_6_0};	// src/main/scala/devices/tilelink/Plic.scala:350:{55,100}
  wire [3:0] effectivePriority_8 = {io_ip_0[7], io_prio_7_0};	// src/main/scala/devices/tilelink/Plic.scala:350:{55,100}
  wire       _GEN = effectivePriority_1 < 4'h9;	// src/main/scala/devices/tilelink/Plic.scala:346:20, :350:100
  wire [3:0] _GEN_0 = _GEN ? 4'h8 : effectivePriority_1;	// src/main/scala/devices/tilelink/Plic.scala:346:20, :350:100, src/main/scala/util/Misc.scala:35:9
  wire       _GEN_1 = effectivePriority_2 >= effectivePriority_3;	// src/main/scala/devices/tilelink/Plic.scala:346:20, :350:100
  wire [3:0] _GEN_2 = _GEN_1 ? effectivePriority_2 : effectivePriority_3;	// src/main/scala/devices/tilelink/Plic.scala:346:20, :350:100, src/main/scala/util/Misc.scala:35:9
  wire       _GEN_3 = _GEN_0 >= _GEN_2;	// src/main/scala/devices/tilelink/Plic.scala:346:20, src/main/scala/util/Misc.scala:35:9
  wire [3:0] _GEN_4 = _GEN_3 ? _GEN_0 : _GEN_2;	// src/main/scala/devices/tilelink/Plic.scala:346:20, src/main/scala/util/Misc.scala:35:9
  wire       _GEN_5 = effectivePriority_4 >= effectivePriority_5;	// src/main/scala/devices/tilelink/Plic.scala:346:20, :350:100
  wire [3:0] _GEN_6 = _GEN_5 ? effectivePriority_4 : effectivePriority_5;	// src/main/scala/devices/tilelink/Plic.scala:346:20, :350:100, src/main/scala/util/Misc.scala:35:9
  wire       _GEN_7 = effectivePriority_6 >= effectivePriority_7;	// src/main/scala/devices/tilelink/Plic.scala:346:20, :350:100
  wire [3:0] _GEN_8 = _GEN_7 ? effectivePriority_6 : effectivePriority_7;	// src/main/scala/devices/tilelink/Plic.scala:346:20, :350:100, src/main/scala/util/Misc.scala:35:9
  wire       _GEN_9 = _GEN_6 >= _GEN_8;	// src/main/scala/devices/tilelink/Plic.scala:346:20, src/main/scala/util/Misc.scala:35:9
  wire [3:0] _GEN_10 = _GEN_9 ? _GEN_6 : _GEN_8;	// src/main/scala/devices/tilelink/Plic.scala:346:20, src/main/scala/util/Misc.scala:35:9
  wire       _GEN_11 = _GEN_4 >= _GEN_10;	// src/main/scala/devices/tilelink/Plic.scala:346:20, src/main/scala/util/Misc.scala:35:9
  wire [3:0] _GEN_12 = _GEN_11 ? _GEN_4 : _GEN_10;	// src/main/scala/devices/tilelink/Plic.scala:346:20, src/main/scala/util/Misc.scala:35:9
  wire       _GEN_13 = _GEN_12 >= effectivePriority_8;	// src/main/scala/devices/tilelink/Plic.scala:346:20, :350:100, src/main/scala/util/Misc.scala:35:9
  wire [3:0] maxPri = _GEN_13 ? _GEN_12 : effectivePriority_8;	// src/main/scala/devices/tilelink/Plic.scala:346:20, :350:100, src/main/scala/util/Misc.scala:35:9
  assign maxDev =
    _GEN_13
      ? {1'h0,
         _GEN_11
           ? {1'h0, _GEN_3 ? {1'h0, ~_GEN} : {1'h1, ~_GEN_1}}
           : {1'h1, _GEN_9 ? {1'h0, ~_GEN_5} : {1'h1, ~_GEN_7}}}
      : 4'h8;	// src/main/scala/devices/tilelink/Plic.scala:346:{20,57}, src/main/scala/util/Misc.scala:35:36
  wire [3:0] io_dev_0 = maxDev;	// src/main/scala/util/Misc.scala:35:36
  wire [2:0] io_max_0 = maxPri[2:0];	// src/main/scala/devices/tilelink/Plic.scala:352:10, src/main/scala/util/Misc.scala:35:9
  assign io_dev = io_dev_0;
  assign io_max = io_max_0;
endmodule


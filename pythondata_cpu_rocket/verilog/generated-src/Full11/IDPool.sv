// Generated by CIRCT firtool-1.66.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module IDPool(
  input        clock,
               reset,
               io_free_valid,	// src/main/scala/util/IDPool.scala:12:14
  input  [2:0] io_free_bits,	// src/main/scala/util/IDPool.scala:12:14
  input        io_alloc_ready,	// src/main/scala/util/IDPool.scala:12:14
  output       io_alloc_valid,	// src/main/scala/util/IDPool.scala:12:14
  output [2:0] io_alloc_bits	// src/main/scala/util/IDPool.scala:12:14
);

  wire [2:0] io_alloc_bits_0;
  wire       io_free_valid_0 = io_free_valid;
  wire [2:0] io_free_bits_0 = io_free_bits;
  wire       io_alloc_ready_0 = io_alloc_ready;
  wire [2:0] allocated_shiftAmount = io_free_bits_0;	// src/main/scala/chisel3/util/OneHot.scala:64:49
  wire [2:0] taken_shiftAmount = io_alloc_bits_0;	// src/main/scala/chisel3/util/OneHot.scala:64:49
  reg  [7:0] bitmap;	// src/main/scala/util/IDPool.scala:18:23
  reg  [2:0] select;	// src/main/scala/util/IDPool.scala:19:23
  assign io_alloc_bits_0 = select;	// src/main/scala/util/IDPool.scala:19:23
  reg        valid;	// src/main/scala/util/IDPool.scala:20:23
  wire       io_alloc_valid_0 = valid;	// src/main/scala/util/IDPool.scala:20:23
  wire [7:0] taken = io_alloc_ready_0 ? 8'h1 << taken_shiftAmount : 8'h0;	// src/main/scala/chisel3/util/OneHot.scala:64:49, :65:12, src/main/scala/util/IDPool.scala:25:19
  wire [7:0] allocated = io_free_valid_0 ? 8'h1 << allocated_shiftAmount : 8'h0;	// src/main/scala/chisel3/util/OneHot.scala:64:49, :65:12, src/main/scala/util/IDPool.scala:26:22
  wire [7:0] bitmap1 = bitmap & ~taken | allocated;	// src/main/scala/util/IDPool.scala:18:23, :25:19, :26:22, :27:{25,27,35}
  wire [2:0] select1 =
    bitmap1[0]
      ? 3'h0
      : bitmap1[1]
          ? 3'h1
          : bitmap1[2]
              ? 3'h2
              : bitmap1[3]
                  ? 3'h3
                  : bitmap1[4] ? 3'h4 : bitmap1[5] ? 3'h5 : {2'h3, ~(bitmap1[6])};	// src/main/scala/chisel3/util/Mux.scala:50:70, src/main/scala/chisel3/util/OneHot.scala:48:45, src/main/scala/util/IDPool.scala:27:35
  wire       valid1 =
    (|bitmap)
    & ~({1'h0,
         {1'h0, {1'h0, bitmap[0]} + {1'h0, bitmap[1]}}
           + {1'h0, {1'h0, bitmap[2]} + {1'h0, bitmap[3]}}}
        + {1'h0,
           {1'h0, {1'h0, bitmap[4]} + {1'h0, bitmap[5]}}
             + {1'h0, {1'h0, bitmap[6]} + {1'h0, bitmap[7]}}} == 4'h1 & io_alloc_ready_0)
    | io_free_valid_0;	// src/main/scala/util/IDPool.scala:18:23, :29:{28,32,35,46,55,64}, :30:17
  reg        REG;	// src/main/scala/util/IDPool.scala:51:36
  `ifndef SYNTHESIS	// src/main/scala/util/IDPool.scala:44:10
    always @(posedge clock) begin	// src/main/scala/util/IDPool.scala:44:10
      automatic logic [7:0] _GEN;	// src/main/scala/util/IDPool.scala:44:47
      _GEN = (bitmap & ~taken) >> io_free_bits_0;	// src/main/scala/util/IDPool.scala:18:23, :25:19, :27:27, :44:{38,47}
      if (~reset & ~(~io_free_valid_0 | ~(_GEN[0]))) begin	// src/main/scala/util/IDPool.scala:44:{10,11,26,29,47}
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/util/IDPool.scala:44:10
          $error("Assertion failed\n    at IDPool.scala:44 assert (!io.free.valid || !(bitmap & ~taken)(io.free.bits))\n");	// src/main/scala/util/IDPool.scala:44:10
        if (`STOP_COND_)	// src/main/scala/util/IDPool.scala:44:10
          $fatal;	// src/main/scala/util/IDPool.scala:44:10
      end
      if (~reset & valid != (|bitmap)) begin	// src/main/scala/util/IDPool.scala:18:23, :20:23, :29:28, :44:10, :48:{12,19}
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/util/IDPool.scala:48:12
          $error("Assertion failed\n    at IDPool.scala:48 assert (valid === bitmap.orR)\n");	// src/main/scala/util/IDPool.scala:48:12
        if (`STOP_COND_)	// src/main/scala/util/IDPool.scala:48:12
          $fatal;	// src/main/scala/util/IDPool.scala:48:12
      end
      if (io_alloc_valid_0 & REG & ~reset
          & select != (bitmap[0]
                         ? 3'h0
                         : bitmap[1]
                             ? 3'h1
                             : bitmap[2]
                                 ? 3'h2
                                 : bitmap[3]
                                     ? 3'h3
                                     : bitmap[4]
                                         ? 3'h4
                                         : bitmap[5] ? 3'h5 : {2'h3, ~(bitmap[6])})) begin	// src/main/scala/chisel3/util/Mux.scala:50:70, src/main/scala/util/IDPool.scala:18:23, :19:23, :29:46, :44:10, :51:{26,36}, :52:{14,22}
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/util/IDPool.scala:52:14
          $error("Assertion failed\n    at IDPool.scala:52 assert (select === PriorityEncoder(bitmap))\n");	// src/main/scala/util/IDPool.scala:52:14
        if (`STOP_COND_)	// src/main/scala/util/IDPool.scala:52:14
          $fatal;	// src/main/scala/util/IDPool.scala:52:14
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_0;	// src/main/scala/util/IDPool.scala:39:24
    _GEN_0 = io_alloc_ready_0 | ~io_alloc_valid_0 & io_free_valid_0;	// src/main/scala/util/IDPool.scala:39:{24,28,44}
    if (reset) begin
      bitmap <= 8'hFF;	// src/main/scala/util/IDPool.scala:18:23
      select <= 3'h0;	// src/main/scala/util/IDPool.scala:19:23
      valid <= 1'h1;	// src/main/scala/util/IDPool.scala:20:23
    end
    else begin
      if (io_alloc_ready_0 | io_free_valid_0) begin	// src/main/scala/util/IDPool.scala:33:24
        bitmap <= bitmap1;	// src/main/scala/util/IDPool.scala:18:23, :27:35
        valid <= valid1;	// src/main/scala/util/IDPool.scala:20:23, :30:17
      end
      if (_GEN_0)	// src/main/scala/util/IDPool.scala:39:24
        select <= select1;	// src/main/scala/chisel3/util/Mux.scala:50:70, src/main/scala/util/IDPool.scala:19:23
    end
    REG <= _GEN_0;	// src/main/scala/util/IDPool.scala:39:24, :51:36
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM[0:0];
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        bitmap = _RANDOM[/*Zero width*/ 1'b0][7:0];	// src/main/scala/util/IDPool.scala:18:23
        select = _RANDOM[/*Zero width*/ 1'b0][10:8];	// src/main/scala/util/IDPool.scala:18:23, :19:23
        valid = _RANDOM[/*Zero width*/ 1'b0][11];	// src/main/scala/util/IDPool.scala:18:23, :20:23
        REG = _RANDOM[/*Zero width*/ 1'b0][12];	// src/main/scala/util/IDPool.scala:18:23, :51:36
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_alloc_valid = io_alloc_valid_0;
  assign io_alloc_bits = io_alloc_bits_0;
endmodule

